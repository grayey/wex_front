{"version":3,"sources":["app/views/sessions/Signin.jsx","app/appNotifications.jsx","app/environment/environment.js","app/services/apiService.js","app/services/appMainService.js"],"names":["SigninSchema","yup","shape","email","required","password","min","Signin","props","state","navigate","isSubmitting","successUrl","handleChange","event","persist","setState","target","name","value","handleSubmit","loginObject","username","appMainService","logUserIn","then","userResponse","notification","type","message","timeOut","statusCode","msg","AppNotification","localStorageService","setItem","console","log","catch","error","errorNotification","utils","isEmail","text","match","AppMainService","this","to","className","style","backgroundColor","public","src","alt","initialValues","validationSchema","onSubmit","values","errors","touched","handleBlur","htmlFor","onChange","onBlur","disabled","backgroundSize","backgroundImage","Component","connect","loginWithEmailAndPassword","PropTypes","func","isRequired","user","notificationType","title","NotificationManager","env","process","app_mode","trim","APP_ENVIRONMENT","development","base_url","websocket_url","base_url_front","paystack_api_key","mapbox_token","production","BASE_URL","get","url","a","id","data","path","extractDataAsParam","axios","response","jsonData","requestStatus","post","errorResponse","put","patch","del","delete","postFile","file","Object","keys","length","dataParams","appendment","key","authUser","getItem","apiService","userData","_id","status","updateUser","userSlug","roleData","role","updateRole","roleSlug","categoryData","category","updateCategory","user_type","getAllProducts","productData","product","idOrSlug","updateProduct","productId","stock","stockId"],"mappings":"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","file":"static/js/14.db4659fe.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Formik } from \"formik\";\nimport * as yup from \"yup\";\nimport { loginWithEmailAndPassword } from \"app/redux/actions/LoginActions\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { Button } from \"react-bootstrap\";\nimport AppMainService from \"../../services/appMainService\";\nimport localStorageService from \"../../services/localStorageService\";\nimport AppNotification from \"../../appNotifications\";\nimport * as utils from \"@utils\";\nimport { FaCog } from \"react-icons/fa\";\n\nconst SigninSchema = yup.object().shape({\n  email: yup.string().required(\"username or email is required\"),\n  password: yup\n    .string()\n    .min(8, \"Password must be 8 character long\")\n    .required(\"password is required\"),\n});\n\nclass Signin extends Component {\n  appMainService;\n\n  constructor(props) {\n    super(props);\n    this.appMainService = new AppMainService();\n  }\n\n  state = {\n    email: \"\",\n    password: \"\",\n    navigate: false,\n    isSubmitting: false,\n    successUrl: \"dashboard/v1\",\n  };\n\n  handleChange = (event) => {\n    event.persist();\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  handleSubmit = (value) => {\n    let { isSubmitting } = this.state;\n    isSubmitting = !isSubmitting;\n    this.setState({ isSubmitting });\n    const { email, password } = value;\n    const loginObject = {\n      username: email,\n      email,\n      password,\n    };\n    this.appMainService\n      .logUserIn(loginObject)\n      .then((userResponse) => {\n        isSubmitting = !isSubmitting;\n        this.setState({ isSubmitting });\n\n        const notification = {\n          type: \"\",\n          message: \"\",\n          timeOut: null,\n        };\n\n        if (userResponse.statusCode == 401) {\n          notification.type = \"error\";\n          notification.msg = userResponse.message;\n          return new AppNotification(notification);\n        }\n\n        notification.type = \"success\";\n        notification.msg = `Welcome ${userResponse.username}!`;\n        notification.timeOut = 1000;\n        localStorageService.setItem(\"AUTH_USER\", userResponse);\n        this.setState({ navigate: true });\n        // this.props.loginWithEmailAndPassword(loginObject);\n        console.log({ userResponse });\n\n        return new AppNotification(notification);\n      })\n      .catch((error) => {\n        this.setState({ isSubmitting });\n        const errorNotification = {\n          type: \"error\",\n          msg: utils.processErrors(error),\n        };\n        new AppNotification(errorNotification);\n      });\n  };\n\n  isEmail = (text) => {\n    const mailFormat =\n      /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n    return text.match(mailFormat);\n  };\n\n  render() {\n    return this.state.navigate ? (\n      <Redirect to={this.state.successUrl} />\n    ) : (\n      <div\n        className=\"auth-layout-wrap\"\n        style={{\n          // backgroundImage: \"url(/assets/images/photo-wide-4.jpg)\"\n          backgroundColor: \"transparent !important\",\n        }}\n      >\n        <div className=\"auth-content\">\n          <div className={`${this.props?.public ? \"cardx\" : \"card\"} o-hidden`}>\n            <div className=\"row\">\n              <div className=\"col-md-6\">\n                <div className=\"p-4\">\n                  <div className=\"auth-logo text-center mb-4\">\n                    <img src=\"/assets/images/logo.png\" alt=\"\" />\n                  </div>\n                  <h1 className=\"mb-3 text-18\">Sign In</h1>\n                  <Formik\n                    initialValues={this.state}\n                    validationSchema={SigninSchema}\n                    onSubmit={this.handleSubmit}\n                  >\n                    {({\n                      values,\n                      errors,\n                      touched,\n                      handleChange,\n                      handleBlur,\n                      handleSubmit,\n                      isSubmitting,\n                    }) => (\n                      <form onSubmit={handleSubmit}>\n                        <div className=\"form-group\">\n                          <label htmlFor=\"email\">\n                            Username <b>OR</b> Email\n                          </label>\n                          <input\n                            className=\"form-control form-control-rounded position-relative\"\n                            type=\"text\"\n                            name=\"email\"\n                            onChange={handleChange}\n                            onBlur={handleBlur}\n                            value={values.email}\n                          />\n                          {errors.email && (\n                            <div className=\"text-danger mt-1 ml-2\">\n                              {errors.email}\n                            </div>\n                          )}\n                        </div>\n                        <div className=\"form-group\">\n                          <label htmlFor=\"password\">Password</label>\n                          <input\n                            className=\"form-control form-control-rounded\"\n                            type=\"password\"\n                            name=\"password\"\n                            onChange={handleChange}\n                            onBlur={handleBlur}\n                            value={values.password}\n                          />\n                          {errors.password && (\n                            <div className=\"text-danger mt-1 ml-2\">\n                              {errors.password}\n                            </div>\n                          )}\n                        </div>\n                        <button\n                          className=\"btn btn-rounded btn-primary btn-block mt-2\"\n                          type=\"submit\"\n                          disabled={this.state.isSubmitting}\n                        >\n                          Sign In{\" \"}\n                          {this.state.isSubmitting ? (\n                            <FaCog className=\"fa-spin\" />\n                          ) : null}\n                        </button>\n                      </form>\n                    )}\n                  </Formik>\n\n                  <div className=\"mt-3 text-center\">\n                    <Link to=\"/session/forgot-password\" className=\"text-muted\">\n                      <u>Forgot Password?</u>\n                    </Link>\n                  </div>\n                </div>\n              </div>\n              <div\n                className=\"col-md-6 text-center \"\n                style={{\n                  backgroundSize: \"cover\",\n                  backgroundImage: \"url(/assets/images/photo-long-3.jpg)\",\n                }}\n              >\n                <div className=\"pr-3 auth-right\">\n                  <Link\n                    to=\"/session/signup\"\n                    className=\"btn btn-rounded btn-outline-primary btn-outline-email btn-block btn-icon-text\"\n                  >\n                    <i className=\"i-Mail-with-At-Sign\"></i> Sign up with Email\n                  </Link>\n\n                  <Button className=\"btn btn-rounded btn-outline-google btn-block btn-icon-text\">\n                    <i className=\"i-Google-Plus\"></i> Sign up with Google\n                  </Button>\n                  <Button className=\"btn btn-rounded btn-block btn-icon-text btn-outline-facebook\">\n                    <i className=\"i-Facebook-2\"></i> Sign up with Facebook\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  loginWithEmailAndPassword: PropTypes.func.isRequired,\n  user: state.user,\n});\n\nexport default connect(mapStateToProps, {\n  loginWithEmailAndPassword,\n})(Signin);\n","import {\r\n    NotificationManager\r\n  } from \"react-notifications\";\r\n\r\n\r\nexport default class AppNotification {\r\n    constructor(props){\r\n        const notificationType = props.type;\r\n        const timeOut = props.timeOut || 10000;\r\n        const message = props.msg\r\n        const title = notificationType;\r\n          NotificationManager[notificationType](\r\n              message,\r\n              title,\r\n              timeOut\r\n            );\r\n        }\r\n\r\n\r\n        \r\n         \r\n  }\r\n\r\n   \r\n","const env = process.env.NODE_ENV;\r\nconst app_mode = env ? env.trim() : \"development\";\r\nconsole.log(\"env\", env, process.env)\r\n\r\nconst environment = {\r\n    development: {\r\n        base_url: 'http://localhost:5000/api',\r\n        // websocket_url:'http://localhost:8000',\r\n        websocket_url:'https://c5853d42c26c.ngrok.io',\r\n        base_url_front: '',\r\n        paystack_api_key:'pk_test_18e1b66031dc64ef4cc27827419428bac31851e1',\r\n        mapbox_token:'pk.eyJ1IjoiZ3JheWV5LWVtbXMiLCJhIjoiY2txODMzb2ZoMGM3ZzJvb2FnN3FpM2dpdyJ9.cC6x5fEQGF3gDJtr6JLNwg'\r\n    },\r\n    production: {\r\n        base_url: 'https://c8c24ab41dee.ngrok.io/api',\r\n        websocket_url:'https://c5853d42c26c.ngrok.io',\r\n        base_url_front: '',\r\n        paystack_api_key:'pk_test_18e1b66031dc64ef4cc27827419428bac31851e1',\r\n        mapbox_token:'pk.eyJ1IjoiZ3JheWV5LWVtbXMiLCJhIjoiY2txODMzb2ZoMGM3ZzJvb2FnN3FpM2dpdyJ9.cC6x5fEQGF3gDJtr6JLNwg'\r\n\r\n    }\r\n\r\n}\r\n\r\nexport const APP_ENVIRONMENT = environment[app_mode];","import axios from \"axios\";\r\nimport { APP_ENVIRONMENT } from \"../environment/environment\";\r\nimport localStorageService from \"./localStorageService\";\r\n\r\nconst BASE_URL = APP_ENVIRONMENT.base_url;\r\n\r\nexport const get = async (url, id = null, data = {}) => {\r\n  let path = `${BASE_URL}/${url}`;\r\n  path = !id ? path : `${path}/${id}`;\r\n  path = extractDataAsParam(path, data);\r\n  return await axios\r\n    .get(path)\r\n    .then((response) => {\r\n      return response.data;\r\n    })\r\n    .then((jsonData) => {\r\n      return jsonData;\r\n    })\r\n    .catch((error) => {\r\n      const errorResponse = {\r\n        data: error,\r\n        message: error.message,\r\n        requestStatus: false,\r\n        statusCode: error,\r\n      };\r\n      throw errorResponse;\r\n    });\r\n};\r\n\r\nexport const post = async (url, data) => {\r\n  const path = `${BASE_URL}/${url}`;\r\n  return await axios\r\n    .post(path, data)\r\n    .then((response) => {\r\n      return response.data;\r\n    })\r\n    .catch((error) => {\r\n      const errorResponse = error.response;\r\n      console.log(errorResponse);\r\n      throw errorResponse;\r\n    });\r\n};\r\n\r\nexport const put = async (url, data = null) => {\r\n  const path = `${BASE_URL}/${url}`;\r\n  return await axios\r\n    .put(path, data)\r\n    .then((response) => {\r\n      return response.data;\r\n    })\r\n    .catch((error) => {\r\n      const errorResponse = error.response;\r\n      throw errorResponse;\r\n    });\r\n};\r\n\r\nexport const patch = async (url, data = null) => {\r\n  const path = `${BASE_URL}/${url}`;\r\n  return await axios\r\n    .patch(path, data)\r\n    .then((response) => {\r\n      return response.data;\r\n    })\r\n    .catch((error) => {\r\n      const errorResponse = error.response;\r\n      throw errorResponse;\r\n    });\r\n};\r\n\r\nexport const del = async (url) => {\r\n  const path = `${BASE_URL}/${url}`;\r\n  return await axios\r\n    .delete(path)\r\n    .then((response) => {\r\n      return response.data;\r\n    })\r\n    .catch((error) => {\r\n      const errorResponse = error.response;\r\n      throw errorResponse;\r\n    });\r\n};\r\n\r\nexport const postFile = async (url, file, data = null) => {\r\n  const path = extractDataAsParam(`${BASE_URL}/${url}`, data);\r\n  return await axios\r\n    .post(path, file, data)\r\n    .then((response) => {\r\n      return response.data;\r\n    })\r\n    .catch((error) => {\r\n      const errorResponse = error.response;\r\n      throw errorResponse;\r\n    });\r\n};\r\n\r\n// async function post(url, data) {\r\n//     return fetch(path).then(res => res.json()).catch(error => error.json());\r\n// }\r\n\r\n// async function put(url, data) {\r\n//     return fetch(path).then(res => res.json()).catch(error => error.json());\r\n// }\r\n\r\n// async function del(url) {\r\n//     return fetch(path).then(res => res.json()).catch(error => error.json());\r\n// }\r\n\r\nfunction extractDataAsParam(path, data = {}) {\r\n  if (Object.keys(data).length) {\r\n    let dataParams = \"?\";\r\n    let appendment = \"\";\r\n    for (let key in data) {\r\n      appendment += `${key}=${data[key]}&`;\r\n    }\r\n    path += `${dataParams}${appendment}`;\r\n  }\r\n  return path;\r\n}\r\n","import * as apiService from './apiService';\r\nimport localStorageService from './localStorageService';\r\n\r\n\r\n\r\n\r\nexport default class AppMainService {\r\n\r\n    constructor() {\r\n        this.authUser = localStorageService.getItem('AUTH_USER');\r\n\r\n\r\n    }\r\n\r\n\r\n     /**\r\n     * \r\n     * --- USERS SECTION HERE ----\r\n     * \r\n     */\r\n\r\n\r\n     /**\r\n      * \r\n      * @param {*} user\r\n      * \r\n      * This method logs a user in \r\n      */\r\n     async logUserIn(user){\r\n        return await apiService.post('users/auth/login', user);\r\n     }\r\n\r\n\r\n     /**\r\n      * This method returns a list of all users\r\n      */\r\n     async getAllUsers(){\r\n        const url = 'users';\r\n        return await apiService.get(url);\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * @param {*} userData \r\n     * this method creates a new user\r\n     */\r\n    async createUser(userData){\r\n        const url = 'users/';\r\n        return await apiService.post(url,userData);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {*} user \r\n     * @param {*} id \r\n     * This method updates a user\r\n     */\r\n    async updateUser(user, id){\r\n        const url =`users/${id}/`;\r\n        return await apiService.put(url,user);\r\n\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {*} user\r\n     * This method deletes a user\r\n     */\r\n    async deleteUser(user){\r\n        const url = `users/${user._id}`\r\n        return await apiService.del(url);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {*} user \r\n     * This method toggles a user\r\n     */\r\n    async toggleUser(user){\r\n        user.status = !user.status\r\n      return this.updateUser(user, user._id);\r\n    }\r\n\r\n    /**\r\n      * This method returns a user by its slug\r\n      * \r\n      */\r\n     async getUserBySlug(userSlug){\r\n        const url = `users/${userSlug}`;\r\n        return await apiService.get(url);\r\n    }\r\n\r\n    \r\n\r\n\r\n\r\n    \r\n    /**\r\n     * \r\n     * --- ROLES SECTION HERE ----\r\n     * \r\n     */\r\n\r\n\r\n     /**\r\n      * This method returns a list of all roles\r\n      */\r\n    async getAllRoles(){\r\n        const url = 'roles';\r\n        return await apiService.get(url);\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * @param {*} roleData \r\n     * this method creates a new role\r\n     */\r\n    async createRole(roleData){\r\n        const url = 'roles/';\r\n        return await apiService.post(url,roleData);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {*} role \r\n     * @param {*} id \r\n     * This method updates a role\r\n     */\r\n    async updateRole(role, id){\r\n        const url =`roles/${id}/`;\r\n        return await apiService.put(url,role);\r\n\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {*} role\r\n     * This method deletes a role\r\n     */\r\n    async deleteRole(role){\r\n        const url = `roles/${role._id}`\r\n        return await apiService.del(url);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {*} role \r\n     * This method toggles a role\r\n     */\r\n    async toggleRole(role){\r\n        role.status = !role.status\r\n      return this.updateRole(role, role._id);\r\n    }\r\n\r\n    /**\r\n      * This method returns a role by its slug\r\n      * \r\n      */\r\n     async getRoleBySlug(roleSlug){\r\n        const url = `roles/${roleSlug}`;\r\n        return await apiService.get(url);\r\n    }\r\n\r\n\r\n\r\n\r\n     /**\r\n     * \r\n     * --- CATEGORIES SECTION HERE ----\r\n     * \r\n     */\r\n\r\n\r\n     /**\r\n      * This method returns a list of all categories\r\n      */\r\n     async getAllCategories(){\r\n        const url = 'categories';\r\n        return await apiService.get(url);\r\n    }\r\n\r\n\r\n    \r\n    \r\n\r\n    /**\r\n     * \r\n     * @param {*} categoryData \r\n     * this method creates a new category\r\n     */\r\n    async createCategory(categoryData){\r\n        const url = 'categories/';\r\n        return await apiService.post(url,categoryData);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {*} category \r\n     * @param {*} id \r\n     * This method updates a category\r\n     */\r\n    async updateCategory(category, id){\r\n        const url =`categories/${id}/`;\r\n        return await apiService.put(url,category);\r\n\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {*} category\r\n     * This method deletes a category\r\n     */\r\n    async deleteCategory(category){\r\n        const url = `categories/${category._id}`\r\n        return await apiService.del(url);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {*} category \r\n     * This method toggles a category\r\n     */\r\n    async toggleCategory(category){\r\n        category.status = !category.status\r\n      return this.updateCategory(category, category._id);\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * \r\n     * --- ROLES SECTION HERE ----\r\n     * \r\n     */\r\n\r\n\r\n     /**\r\n      * This method returns a list of all roles\r\n      */\r\n     async getAllRoles(){\r\n        const url = 'roles';\r\n        return await apiService.get(url);\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * @param {*} roleData \r\n     * this method creates a new role\r\n     */\r\n    async createRole(roleData){\r\n        const url = 'roles/';\r\n        return await apiService.post(url,roleData);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {*} role \r\n     * @param {*} id \r\n     * This method updates a role\r\n     */\r\n    async updateRole(role, id){\r\n        const url =`roles/${id}/`;\r\n        return await apiService.put(url,role);\r\n\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {*} role\r\n     * This method deletes a role\r\n     */\r\n    async deleteRole(role){\r\n        const url = `roles/${role._id}`\r\n        return await apiService.del(url);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {*} role \r\n     * This method toggles a role\r\n     */\r\n    async toggleRole(role){\r\n        role.status = !role.status\r\n      return this.updateRole(role, role._id);\r\n    }\r\n\r\n    /**\r\n      * This method returns a role by its slug\r\n      * \r\n      */\r\n     async getRoleBySlug(roleSlug){\r\n        const url = `roles/${roleSlug}`;\r\n        return await apiService.get(url);\r\n    }\r\n\r\n\r\n\r\n\r\n     /**\r\n     * \r\n     * --- PRODUCTS SECTION HERE ----\r\n     * \r\n     */\r\n\r\n\r\n     /**\r\n      * This method returns a list of all products\r\n      */\r\n     async getAllProducts(){\r\n        const url = `products`;\r\n        return await apiService.get(url);\r\n    }\r\n\r\n\r\n    async getProductsByOwnerId(){\r\n        if(this.authUser && this.authUser?.user_type == 'ADMIN') return this.getAllProducts();\r\n        const url = `products/owner/${this.authUser?._id}`;\r\n        return await apiService.get(url);\r\n    }\r\n    \r\n\r\n    /**\r\n     * \r\n     * @param {*} productData \r\n     * this method creates a new product\r\n     */\r\n    async createProduct(productData){\r\n        const url = 'products/';\r\n        return await apiService.post(url,productData);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {*} product \r\n     * @param {*} id \r\n     * This method updates a product\r\n     */\r\n    async updateProduct(product, id){\r\n        const url =`products/${id}/`;\r\n        return await apiService.put(url,product);\r\n\r\n    }\r\n\r\n     /**\r\n     * \r\n     * @param {*} product \r\n     * @param {*} id \r\n     * This method updates a product\r\n     */\r\n    async getProductById(idOrSlug){\r\n        const url =`products/${idOrSlug}/`;\r\n        return await apiService.get(url);\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * @param {*} product\r\n     * This method deletes a product\r\n     */\r\n    async deleteProduct(product){\r\n        const url = `products/${product._id}`\r\n        return await apiService.del(url);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {*} product \r\n     * This method toggles a product\r\n     */\r\n    async toggleProduct(product){\r\n        product.status = !product.status\r\n      return this.updateProduct(product, product._id);\r\n    }\r\n\r\n    \r\n    /**\r\n     * \r\n     * STOCKS SECTION --------\r\n     * \r\n     */\r\n\r\n\r\n     \r\n    /**\r\n     * \r\n     * @param {*} productId \r\n     * @param {*} stock \r\n     *  \r\n      * This method returns a creates a new stock using product id\r\n      */\r\n      async createProductStock(productId, stock){\r\n          const url = `products/${productId}/stocks/`;\r\n          return await apiService.post(url,stock);\r\n\r\n      }\r\n\r\n      /**\r\n       * \r\n       * @param {*} stockId \r\n       * This method gets a stock by Id\r\n       */\r\n      async getStockById(stockId){\r\n        const url = `stocks/${stockId}`;\r\n        return await apiService.get(url);\r\n      }\r\n\r\n      \r\n      async featureStock(stock){\r\n          const url = `products/stocks/feature/${stock._id}`;\r\n          return await apiService.put(url,stock);\r\n      }\r\n\r\n\r\n\r\n\r\n    /**\r\n     * \r\n     * TASKS SECTION --------\r\n     * \r\n      * This method returns a list of all tasks\r\n      *      \r\n      *  */\r\n     async getAllTasks(){\r\n        const url = 'tasks';\r\n        return await apiService.get(url);\r\n    }\r\n\r\n}"],"sourceRoot":""}