{"version":3,"sources":["app/GullLayout/Layout1/Layout1Sidenav.jsx","app/GullLayout/Layout1/Layout1Header.jsx","app/GullLayout/Layout1/Layout1.jsx"],"names":["Layout1Sidenav","windowListener","state","selectedItem","navOpen","secondaryNavOpen","onMainItemMouseEnter","item","type","setSelected","openSecSidenav","closeSecSidenav","onMainItemMouseLeave","setState","removeSelected","props","setLayoutSettings","settings","merge","layout1Settings","leftSidebar","console","log","other","isMobile","open","closeSidenav","openSidenav","this","window","innerWidth","addEventListener","target","removeEventListener","className","classList","navigations","map","i","active","onMouseEnter","onMouseLeave","key","path","to","icon","name","href","sub","menu","Component","withRouter","connect","setDefaultSettings","PropTypes","func","isRequired","logoutUser","user","layout","Layout1Header","shorcutMenuList","link","text","notificationList","title","description","time","color","status","showSearchBox","authUser","handleMenuClick","toggleFullScreen","document","fullscreenEnabled","fullscreen","exitFullscreen","documentElement","requestFullscreen","handleSearchBoxOpen","searchBox","componentDidMount","localStorageService","getItem","src","alt","onClick","Dropdown","Toggle","as","Menu","MegaMenu","placeholder","onFocus","style","margin","data-fullscreen","role","id","data-toggle","DropdownMenu","note","index","getTimeDifference","Date","DropdownToggle","aria-haspopup","aria-expanded","username","Layout1","handleSearchBoxClose","routes","fallback","Loading","renderRoutes","footer","show","Footer","GullSearch","handleClose"],"mappings":"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","file":"static/js/99.804c74a2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { navigations } from \"../../navigations\";\nimport { merge } from \"lodash\";\nimport { classList, isMobile } from \"@utils\";\nimport Srcollbar from \"react-perfect-scrollbar\";\nimport { DropDownMenu } from \"@gull\";\n\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport {\n  setLayoutSettings,\n  setDefaultSettings\n} from \"app/redux/actions/LayoutActions\";\nimport { logoutUser } from \"app/redux/actions/UserActions\";\nimport { withRouter } from \"react-router-dom\";\nimport ScrollBar from \"react-perfect-scrollbar\";\n\nclass Layout1Sidenav extends Component {\n  windowListener = null;\n\n  state = {\n    selectedItem: null,\n    navOpen: true,\n    secondaryNavOpen: false\n  };\n\n  onMainItemMouseEnter = item => {\n    if (item.type === \"dropDown\") {\n      this.setSelected(item);\n      this.openSecSidenav();\n    } else {\n      this.setSelected(item);\n      this.closeSecSidenav();\n    }\n  };\n\n  onMainItemMouseLeave = () => {\n    // this.closeSecSidenav();\n  };\n\n  setSelected = selectedItem => {\n    this.setState({ selectedItem });\n    // console.log(selectedItem);\n  };\n\n  removeSelected = () => {\n    this.setState({ selectedItem: null });\n    // console.log('removed');\n  };\n\n  openSecSidenav = () => {\n    let { setLayoutSettings, settings } = this.props;\n\n    setLayoutSettings(\n      merge({}, settings, {\n        layout1Settings: {\n          leftSidebar: {\n            secondaryNavOpen: true\n          }\n        }\n      })\n    );\n  };\n\n  closeSecSidenav = () => {\n    console.log(\"closing sec sidenav\");\n    let { setLayoutSettings, settings } = this.props;\n    let other = {};\n\n    if (isMobile()) {\n      other.open = false;\n    }\n\n    setLayoutSettings(\n      merge({}, settings, {\n        layout1Settings: {\n          leftSidebar: {\n            ...other,\n            secondaryNavOpen: false\n          }\n        }\n      })\n    );\n  };\n\n  closeSidenav = () => {\n    console.log(\"closing sidenav\");\n\n    let { setLayoutSettings, settings } = this.props;\n    setLayoutSettings(\n      merge({}, settings, {\n        layout1Settings: {\n          leftSidebar: {\n            open: false,\n            secondaryNavOpen: false\n          }\n        }\n      })\n    );\n  };\n\n  openSidenav = () => {\n    console.log(\"opening sidenav\");\n    let { setLayoutSettings, settings } = this.props;\n    setLayoutSettings(\n      merge({}, settings, {\n        layout1Settings: {\n          leftSidebar: {\n            open: true\n          }\n        }\n      })\n    );\n  };\n\n  componentDidMount() {\n    if (this.state.selectedItem === null) this.closeSecSidenav();\n\n    if (window)\n      if (window.innerWidth < 1200) {\n        this.closeSidenav();\n      } else {\n        this.openSidenav();\n      }\n\n    this.windowListener = window.addEventListener(\"resize\", ({ target }) => {\n      if (window.innerWidth < 1200) {\n        this.closeSidenav();\n      } else {\n        this.openSidenav();\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    if (this.windowListener) {\n      window.removeEventListener(\"resize\", this.windowListener);\n    }\n  }\n\n  render() {\n    let { settings } = this.props;\n\n    return (\n      <div className=\"side-content-wrap\">\n        <Srcollbar\n          className={classList({\n            \"sidebar-left o-hidden rtl-ps-none\": true,\n            open: settings.layout1Settings.leftSidebar.open\n          })}\n          // id=\"mainsidenav\"\n        >\n          <ul className=\"navigation-left\">\n            {navigations.map((item, i) => (\n              <li\n                className={classList({\n                  \"nav-item\": true,\n                  active: this.state.selectedItem === item\n                })}\n                onMouseEnter={() => {\n                  this.onMainItemMouseEnter(item);\n                }}\n                onMouseLeave={this.onMainItemMouseLeave}\n                key={i}\n              >\n                {item.path && item.type !== \"extLink\" && (\n                  <NavLink className=\"nav-item-hold\" to={item.path}>\n                    <i className={`nav-icon ${item.icon}`}></i>\n                    <span className=\"nav-text\">{item.name}</span>\n                  </NavLink>\n                )}\n                {item.path && item.type === \"extLink\" && (\n                  <a className=\"nav-item-hold\" href={item.path}>\n                    <i className={`nav-icon ${item.icon}`}></i>\n                    <span className=\"nav-text\">{item.name}</span>\n                  </a>\n                )}\n                {!item.path && (\n                  <div className=\"nav-item-hold\">\n                    <i className={`nav-icon ${item.icon}`}></i>\n                    <span className=\"nav-text\">{item.name}</span>\n                  </div>\n                )}\n                <div className=\"triangle\"></div>\n              </li>\n            ))}\n          </ul>\n        </Srcollbar>\n\n        <ScrollBar\n          className={classList({\n            \"sidebar-left-secondary o-hidden rtl-ps-none\": true,\n            open: settings.layout1Settings.leftSidebar.secondaryNavOpen\n          })}\n        >\n          {this.state.selectedItem && this.state.selectedItem.sub && (\n            <DropDownMenu\n              menu={this.state.selectedItem.sub}\n              closeSecSidenav={this.closeSecSidenav}\n            ></DropDownMenu>\n          )}\n          <span></span>\n        </ScrollBar>\n        <div\n          onMouseEnter={this.closeSecSidenav}\n          className={classList({\n            \"sidebar-overlay\": true,\n            open: settings.layout1Settings.leftSidebar.secondaryNavOpen\n          })}\n        ></div>\n      </div>\n    );\n  }\n}\n\nLayout1Sidenav.propTypes = {\n  setLayoutSettings: PropTypes.func.isRequired,\n  setDefaultSettings: PropTypes.func.isRequired,\n  logoutUser: PropTypes.func.isRequired,\n  user: PropTypes.object.isRequired,\n  settings: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  setDefaultSettings: PropTypes.func.isRequired,\n  setLayoutSettings: PropTypes.func.isRequired,\n  logoutUser: PropTypes.func.isRequired,\n  user: state.user,\n  settings: state.layout.settings\n});\n\nexport default withRouter(\n  connect(mapStateToProps, {\n    setLayoutSettings,\n    setDefaultSettings,\n    logoutUser\n  })(Layout1Sidenav)\n);\n","import React, { Component } from \"react\";\nimport { Dropdown } from \"react-bootstrap\";\nimport DropdownMenu from \"react-bootstrap/DropdownMenu\";\nimport { getTimeDifference } from \"@utils\";\nimport DropdownToggle from \"react-bootstrap/DropdownToggle\";\nimport { Link } from \"react-router-dom\";\n\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport {\n  setLayoutSettings,\n  setDefaultSettings,\n} from \"app/redux/actions/LayoutActions\";\nimport { logoutUser } from \"app/redux/actions/UserActions\";\nimport { withRouter } from \"react-router-dom\";\n\nimport { merge } from \"lodash\";\nimport MegaMenu from \"@gull/components/MegaMenu\";\nimport localStorageService from \"app/services/localStorageService\";\n\nclass Layout1Header extends Component {\n  state = {\n    shorcutMenuList: [\n      {\n        icon: \"i-Shop-4\",\n        link: \"#\",\n        text: \"Home\",\n      },\n      {\n        icon: \"i-Library\",\n        link: \"#\",\n        text: \"Ui Kits\",\n      },\n      {\n        icon: \"i-Drop\",\n        link: \"#\",\n        text: \"Apps\",\n      },\n      {\n        icon: \"i-File-Clipboard-File--Text\",\n        link: \"#\",\n        text: \"Form\",\n      },\n      {\n        icon: \"i-Checked-User\",\n        link: \"#\",\n        text: \"Sessions\",\n      },\n      {\n        icon: \"i-Ambulance\",\n        link: \"#\",\n        text: \"Support\",\n      },\n    ],\n    notificationList: [\n      {\n        icon: \"i-Speach-Bubble-6\",\n        title: \"New message\",\n        description: \"James: Hey! are you busy?\",\n        time: \"2019-10-30T02:10:18.931Z\",\n        color: \"primary\",\n        status: \"New\",\n      },\n      {\n        icon: \"i-Receipt-3\",\n        title: \"New order received\",\n        description: \"1 Headphone, 3 iPhone\",\n        time: \"2019-03-10T02:10:18.931Z\",\n        color: \"success\",\n        status: \"New\",\n      },\n      {\n        icon: \"i-Empty-Box\",\n        title: \"Product out of stock\",\n        description: \"1 Headphone, 3 iPhone\",\n        time: \"2019-05-10T02:10:18.931Z\",\n        color: \"danger\",\n        status: \"3\",\n      },\n      {\n        icon: \"i-Data-Power\",\n        title: \"Server up!\",\n        description: \"Server rebooted successfully\",\n        time: \"2019-03-10T02:10:18.931Z\",\n        color: \"success\",\n        status: \"3\",\n      },\n    ],\n    showSearchBox: false,\n    authUser: {},\n  };\n\n  handleMenuClick = () => {\n    let { setLayoutSettings, settings } = this.props;\n    setLayoutSettings(\n      merge({}, settings, {\n        layout1Settings: {\n          leftSidebar: {\n            open: settings.layout1Settings.leftSidebar.secondaryNavOpen\n              ? true\n              : !settings.layout1Settings.leftSidebar.open,\n            secondaryNavOpen: false,\n          },\n        },\n      })\n    );\n  };\n\n  toggleFullScreen = () => {\n    if (document.fullscreenEnabled) {\n      if (!document.fullscreen) document.documentElement.requestFullscreen();\n      else document.exitFullscreen();\n    }\n  };\n\n  handleSearchBoxOpen = () => {\n    let { setLayoutSettings, settings } = this.props;\n    setLayoutSettings(\n      merge({}, settings, {\n        layout1Settings: {\n          searchBox: {\n            open: true,\n          },\n        },\n      })\n    );\n  };\n\n  componentDidMount = () => {\n    const authUser = localStorageService.getItem('AUTH_USER');\n    this.setState({\n      authUser\n    })\n  };\n\n  render() {\n    let { shorcutMenuList = [], notificationList = [], authUser } = this.state;\n\n    return (\n      <div className=\"main-header\">\n        <div className=\"logo\">\n          <img src=\"/assets/images/logo.png\" alt=\"\" />\n        </div>\n\n        <div className=\"menu-toggle\" onClick={this.handleMenuClick}>\n          <div></div>\n          <div></div>\n          <div></div>\n        </div>\n\n        <div className=\"d-none d-lg-flex align-items-center\">\n          <Dropdown className=\"mr-3\">\n            <Dropdown.Toggle as=\"span\" className=\"toggle-hidden cursor-pointer\">\n              Mega Menu\n            </Dropdown.Toggle>\n\n            <div className=\"mega-menu\">\n              <Dropdown.Menu>\n                <MegaMenu></MegaMenu>\n              </Dropdown.Menu>\n            </div>\n          </Dropdown>\n\n          <div className=\"search-bar\">\n            <input\n              type=\"text\"\n              placeholder=\"Search\"\n              onFocus={this.handleSearchBoxOpen}\n            />\n            <i className=\"search-icon text-muted i-Magnifi-Glass1\"></i>\n          </div>\n        </div>\n\n        <div style={{ margin: \"auto\" }}></div>\n\n        <div className=\"header-part-right\">\n          <i\n            className=\"i-Full-Screen header-icon d-none d-sm-inline-block\"\n            data-fullscreen\n            onClick={this.toggleFullScreen}\n          ></i>\n\n          <Dropdown>\n            <Dropdown.Toggle as=\"span\" className=\"toggle-hidden\">\n              <i\n                className=\"i-Safe-Box text-muted header-icon\"\n                role=\"button\"\n              ></i>\n            </Dropdown.Toggle>\n            <Dropdown.Menu>\n              <div className=\"menu-icon-grid\">\n                {shorcutMenuList.map((menu) => (\n                  <Link key={menu.text} to={menu.link}>\n                    <i className={menu.icon}></i> {menu.text}\n                  </Link>\n                ))}\n              </div>\n            </Dropdown.Menu>\n          </Dropdown>\n\n          <Dropdown>\n            <Dropdown.Toggle as=\"span\" className=\"toggle-hidden cursor-pointer\">\n              <div\n                className=\"badge-top-container\"\n                role=\"button\"\n                id=\"dropdownNotification\"\n                data-toggle=\"dropdown\"\n              >\n                <span className=\"badge badge-primary\">3</span>\n                <i className=\"i-Bell text-muted header-icon\"></i>\n              </div>\n            </Dropdown.Toggle>\n\n            <DropdownMenu className=\"notification-dropdown rtl-ps-none\">\n              {notificationList.map((note, index) => (\n                <div key={index} className=\"dropdown-item d-flex\">\n                  <div className=\"notification-icon\">\n                    <i className={`${note.icon} text-${note.color} mr-1`}></i>\n                  </div>\n                  <div className=\"notification-details flex-grow-1\">\n                    <p className=\"m-0 d-flex align-items-center\">\n                      <span>{note.title}</span>\n                      <span\n                        className={`badge badge-pill badge-${note.color} ml-1 mr-1`}\n                      >\n                        {note.status}\n                      </span>\n                      <span className=\"flex-grow-1\"></span>\n                      <span className=\"text-small text-muted ml-auto\">\n                        {getTimeDifference(new Date(note.time))} ago\n                      </span>\n                    </p>\n                    <p className=\"text-small text-muted m-0\">\n                      {note.description}\n                    </p>\n                  </div>\n                </div>\n              ))}\n            </DropdownMenu>\n          </Dropdown>\n\n          <div className=\"user col align-self-end\">\n            <Dropdown>\n              <DropdownToggle\n                as=\"span\"\n                className=\"toggle-hidden cursor-pointer\"\n              >\n                <img\n                  src=\"/assets/images/faces/1.jpg\"\n                  id=\"userDropdown\"\n                  alt=\"\"\n                  data-toggle=\"dropdown\"\n                  aria-haspopup=\"true\"\n                  aria-expanded=\"false\"\n                />\n              </DropdownToggle>\n              <DropdownMenu>\n                <div className=\"dropdown-header\">\n                  <i className=\"i-Lock-User mr-1\"></i> {authUser?.username}\n                </div>\n                <Link to=\"/\" className=\"dropdown-item cursor-pointer\">\n                  Account settings\n                </Link>\n                <Link to=\"/\" className=\"dropdown-item cursor-pointer\">\n                  Billing history\n                </Link>\n                <Link\n                  to=\"/\"\n                  className=\"dropdown-item cursor-pointer\"\n                  onClick={this.props.logoutUser}\n                >\n                  Sign out\n                </Link>\n              </DropdownMenu>\n            </Dropdown>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nLayout1Header.propTypes = {\n  setLayoutSettings: PropTypes.func.isRequired,\n  setDefaultSettings: PropTypes.func.isRequired,\n  logoutUser: PropTypes.func.isRequired,\n  user: PropTypes.object.isRequired,\n  settings: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  setDefaultSettings: PropTypes.func.isRequired,\n  setLayoutSettings: PropTypes.func.isRequired,\n  logoutUser: PropTypes.func.isRequired,\n  user: state.user,\n  settings: state.layout.settings,\n});\n\nexport default withRouter(\n  connect(mapStateToProps, {\n    setLayoutSettings,\n    setDefaultSettings,\n    logoutUser,\n  })(Layout1Header)\n);\n","import React, { Component, Suspense } from \"react\";\nimport AppContext from \"app/appContext\";\nimport { renderRoutes } from \"react-router-config\";\n\nimport Layout1Sidenav from \"./Layout1Sidenav\";\nimport Footer from \"../SharedComponents/Footer\";\nimport Layout1Header from \"./Layout1Header\";\n\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { classList } from \"@utils\";\nimport GullSearch from \"@gull/components/GullSearch\";\nimport { setLayoutSettings } from \"app/redux/actions/LayoutActions\";\nimport { merge } from \"lodash\";\nimport Loading from \"@gull/components/GullLoadable/Loading\";\n\nclass Layout1 extends Component {\n  state = {};\n\n  handleSearchBoxClose = () => {\n    let { setLayoutSettings, settings } = this.props;\n    setLayoutSettings(\n      merge({}, settings, {\n        layout1Settings: {\n          searchBox: {\n            open: false\n          }\n        }\n      })\n    );\n  };\n\n  render() {\n    let { settings, routes } = this.props;\n\n    return (\n      <div>\n        <div className={`app-admin-wrap layout-sidebar-large`}>\n          <Layout1Header></Layout1Header>\n          <Layout1Sidenav />\n          {/* sidebar */}\n\n          <div\n            className={classList({\n              \"main-content-wrap d-flex flex-column\": true,\n              \"sidenav-open\": settings.layout1Settings.leftSidebar.open\n            })}\n          >\n            <Suspense fallback={<Loading />}>\n              <div className=\"main-content\">{renderRoutes(routes)}</div>\n            </Suspense>\n            {(settings.footer.show && <Footer></Footer>)}\n          </div>\n        </div>\n        <GullSearch\n          open={settings.layout1Settings.searchBox.open}\n          handleClose={this.handleSearchBoxClose}\n        ></GullSearch>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  setLayoutSettings: PropTypes.func.isRequired,\n  settings: state.layout.settings\n});\n\nexport default connect(mapStateToProps, { setLayoutSettings })(Layout1);\n"],"sourceRoot":""}