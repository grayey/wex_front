{"version":3,"sources":["app/GullLayout/Layout2/Layout2Header.jsx","app/GullLayout/Layout2/Layout2Sidenav.jsx","app/GullLayout/Layout2/Layout2.jsx"],"names":["Layout2Header","state","shorcutMenuList","icon","link","text","notificationList","title","description","time","color","status","showSearchBox","handleMenuClick","props","setLayoutSettings","settings","merge","layout2Settings","leftSidebar","open","secondaryNavOpen","toggleFullScreen","document","fullscreenEnabled","fullscreen","exitFullscreen","documentElement","requestFullscreen","handleSearchBoxOpen","searchBox","this","className","src","alt","onClick","Dropdown","Toggle","variant","id","Menu","MegaMenu","type","placeholder","onFocus","style","margin","data-fullscreen","role","map","menu","key","to","data-toggle","DropdownMenu","note","index","getTimeDifference","Date","DropdownToggle","aria-haspopup","aria-expanded","logoutUser","Component","withRouter","connect","setDefaultSettings","PropTypes","func","isRequired","user","layout","Layout2Sidenav","windowListener","selectedItem","navOpen","onMainItemMouseEnter","item","setSelected","findSelecteditem","navigations","forEach","sub","child","grandChild","path","history","location","pathname","onMainItemMouseLeave","setState","removeSelected","closeSecNav","other","isMobile","openSecNav","setTimeout","window","innerWidth","addEventListener","removeEventListener","classList","i","active","name","onMouseEnter","onMouseLeave","href","closeSecSidenav","Layout2","handleSearchBoxClose","routes","theme","header","show","fallback","Loading","renderRoutes","Footer","GullSearch","handleClose"],"mappings":"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","file":"static/js/93.fd79bab2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Dropdown } from \"react-bootstrap\";\nimport DropdownMenu from \"react-bootstrap/DropdownMenu\";\nimport { getTimeDifference } from \"@utils\";\nimport DropdownToggle from \"react-bootstrap/DropdownToggle\";\nimport { Link } from \"react-router-dom\";\n\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport {\n  setLayoutSettings,\n  setDefaultSettings\n} from \"app/redux/actions/LayoutActions\";\nimport { logoutUser } from \"app/redux/actions/UserActions\";\nimport { withRouter } from \"react-router-dom\";\n\nimport { merge } from \"lodash\";\nimport MegaMenu from \"@gull/components/MegaMenu\";\n\nclass Layout2Header extends Component {\n  state = {\n    shorcutMenuList: [\n      {\n        icon: \"i-Shop-4\",\n        link: \"#\",\n        text: \"Home\"\n      },\n      {\n        icon: \"i-Library\",\n        link: \"#\",\n        text: \"Ui Kits\"\n      },\n      {\n        icon: \"i-Drop\",\n        link: \"#\",\n        text: \"Apps\"\n      },\n      {\n        icon: \"i-File-Clipboard-File--Text\",\n        link: \"#\",\n        text: \"Form\"\n      },\n      {\n        icon: \"i-Checked-User\",\n        link: \"#\",\n        text: \"Sessions\"\n      },\n      {\n        icon: \"i-Ambulance\",\n        link: \"#\",\n        text: \"Support\"\n      }\n    ],\n    notificationList: [\n      {\n        icon: \"i-Speach-Bubble-6\",\n        title: \"New message\",\n        description: \"James: Hey! are you busy?\",\n        time: \"2019-10-30T02:10:18.931Z\",\n        color: \"primary\",\n        status: \"New\"\n      },\n      {\n        icon: \"i-Receipt-3\",\n        title: \"New order received\",\n        description: \"1 Headphone, 3 iPhone\",\n        time: \"2019-03-10T02:10:18.931Z\",\n        color: \"success\",\n        status: \"New\"\n      },\n      {\n        icon: \"i-Empty-Box\",\n        title: \"Product out of stock\",\n        description: \"1 Headphone, 3 iPhone\",\n        time: \"2019-05-10T02:10:18.931Z\",\n        color: \"danger\",\n        status: \"3\"\n      },\n      {\n        icon: \"i-Data-Power\",\n        title: \"Server up!\",\n        description: \"Server rebooted successfully\",\n        time: \"2019-03-10T02:10:18.931Z\",\n        color: \"success\",\n        status: \"3\"\n      }\n    ],\n    showSearchBox: false\n  };\n\n  handleMenuClick = () => {\n    let { setLayoutSettings, settings } = this.props;\n    setLayoutSettings(\n      merge({}, settings, {\n        layout2Settings: {\n          leftSidebar: {\n            open: !settings.layout2Settings.leftSidebar.open,\n            secondaryNavOpen: !settings.layout2Settings.leftSidebar.open\n          }\n        }\n      })\n    );\n  };\n\n  toggleFullScreen = () => {\n    if (document.fullscreenEnabled) {\n      if (!document.fullscreen) document.documentElement.requestFullscreen();\n      else document.exitFullscreen();\n    }\n  };\n\n  handleSearchBoxOpen = () => {\n    let { setLayoutSettings, settings } = this.props;\n    setLayoutSettings(\n      merge({}, settings, {\n        layout2Settings: {\n          searchBox: {\n            open: true\n          }\n        }\n      })\n    );\n  };\n\n  render() {\n    let { shorcutMenuList = [], notificationList = [] } = this.state;\n\n    return (\n      <div className=\"main-header\">\n        <div className=\"logo\">\n          <img src=\"/assets/images/logo.png\" alt=\"\" />\n        </div>\n\n        <div className=\"menu-toggle\" onClick={this.handleMenuClick}>\n          <div></div>\n          <div></div>\n          <div></div>\n        </div>\n\n        <div className=\"d-none d-lg-flex align-items-center\">\n          <Dropdown className=\"mr-3\">\n            <Dropdown.Toggle variant=\"link\" id=\"dropdown-basic\">\n              Mega Menu\n            </Dropdown.Toggle>\n\n            <div className=\"mega-menu\">\n              <Dropdown.Menu>\n                <MegaMenu></MegaMenu>\n              </Dropdown.Menu>\n            </div>\n          </Dropdown>\n\n          <div className=\"search-bar\">\n            <input\n              type=\"text\"\n              placeholder=\"Search\"\n              onFocus={this.handleSearchBoxOpen}\n            />\n            <i className=\"search-icon text-muted i-Magnifi-Glass1\"></i>\n          </div>\n        </div>\n\n        <div style={{ margin: \"auto\" }}></div>\n\n        <div className=\"header-part-right\">\n          <i\n            className=\"i-Full-Screen header-icon d-none d-sm-inline-block\"\n            data-fullscreen\n            onClick={this.toggleFullScreen}\n          ></i>\n\n          <Dropdown>\n            <Dropdown.Toggle variant=\"link\" className=\"toggle-hidden\">\n              <i\n                className=\"i-Safe-Box text-muted header-icon\"\n                role=\"button\"\n              ></i>\n            </Dropdown.Toggle>\n            <Dropdown.Menu>\n              <div className=\"menu-icon-grid\">\n                {shorcutMenuList.map(menu => (\n                  <Link key={menu.text} to={menu.link}>\n                    <i className={menu.icon}></i> {menu.text}\n                  </Link>\n                ))}\n              </div>\n            </Dropdown.Menu>\n          </Dropdown>\n\n          <Dropdown>\n            <Dropdown.Toggle variant=\"link\" className=\"toggle-hidden\">\n              <div\n                className=\"badge-top-container\"\n                role=\"button\"\n                id=\"dropdownNotification\"\n                data-toggle=\"dropdown\"\n              >\n                <span className=\"badge badge-primary\">3</span>\n                <i className=\"i-Bell text-muted header-icon\"></i>\n              </div>\n            </Dropdown.Toggle>\n\n            <DropdownMenu className=\"notification-dropdown rtl-ps-none\">\n              {notificationList.map((note, index) => (\n                <div key={index} className=\"dropdown-item d-flex\">\n                  <div className=\"notification-icon\">\n                    <i className={`${note.icon} text-${note.color} mr-1`}></i>\n                  </div>\n                  <div className=\"notification-details flex-grow-1\">\n                    <p className=\"m-0 d-flex align-items-center\">\n                      <span>{note.title}</span>\n                      <span\n                        className={`badge badge-pill badge-${note.color} ml-1 mr-1`}\n                      >\n                        {note.status}\n                      </span>\n                      <span className=\"flex-grow-1\"></span>\n                      <span className=\"text-small text-muted ml-auto\">\n                        {getTimeDifference(new Date(note.time))} ago\n                      </span>\n                    </p>\n                    <p className=\"text-small text-muted m-0\">\n                      {note.description}\n                    </p>\n                  </div>\n                </div>\n              ))}\n            </DropdownMenu>\n          </Dropdown>\n\n          <div className=\"user col align-self-end\">\n            <Dropdown>\n              <DropdownToggle variant=\"link\" className=\"toggle-hidden\">\n                <img\n                  src=\"/assets/images/faces/1.jpg\"\n                  id=\"userDropdown\"\n                  alt=\"\"\n                  data-toggle=\"dropdown\"\n                  aria-haspopup=\"true\"\n                  aria-expanded=\"false\"\n                />\n              </DropdownToggle>\n              <DropdownMenu>\n                <div className=\"dropdown-header\">\n                  <i className=\"i-Lock-User mr-1\"></i> Timothy Carlson\n                </div>\n                <span className=\"dropdown-item cursor-pointer\">Account settings</span>\n                <span className=\"dropdown-item cursor-pointer\">Billing history</span>\n                <span\n                  className=\"dropdown-item cursor-pointer\"\n                  onClick={this.props.logoutUser}\n                >\n                  Sign out\n                </span>\n              </DropdownMenu>\n            </Dropdown>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nLayout2Header.propTypes = {\n  setLayoutSettings: PropTypes.func.isRequired,\n  setDefaultSettings: PropTypes.func.isRequired,\n  logoutUser: PropTypes.func.isRequired,\n  user: PropTypes.object.isRequired,\n  settings: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  setDefaultSettings: PropTypes.func.isRequired,\n  setLayoutSettings: PropTypes.func.isRequired,\n  logoutUser: PropTypes.func.isRequired,\n  user: state.user,\n  settings: state.layout.settings\n});\n\nexport default withRouter(\n  connect(mapStateToProps, {\n    setLayoutSettings,\n    setDefaultSettings,\n    logoutUser\n  })(Layout2Header)\n);\n","import React, { Component } from \"react\";\nimport { Link, NavLink } from \"react-router-dom\";\nimport { navigations } from \"../../navigations\";\nimport { merge } from \"lodash\";\nimport { classList, isMobile } from \"@utils\";\nimport Srcollbar from \"react-perfect-scrollbar\";\nimport { DropDownMenu } from \"@gull\";\n\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport {\n  setLayoutSettings\n} from \"app/redux/actions/LayoutActions\";\nimport { logoutUser } from \"app/redux/actions/UserActions\";\nimport { withRouter } from \"react-router-dom\";\n\nclass Layout2Sidenav extends Component {\n  windowListener = null;\n  state = {\n    selectedItem: {},\n    navOpen: true,\n    secondaryNavOpen: false\n  };\n\n  onMainItemMouseEnter = item => {\n    this.setSelected(item);\n  };\n\n  findSelecteditem = () => {\n    navigations.forEach(item => {\n      if (item.sub) {\n        item.sub.forEach(child => {\n          if (child.sub) {\n            child.sub.forEach(grandChild => {\n              if (grandChild.path == this.props.history.location.pathname) {\n                this.setSelected(item);\n              }\n            });\n          } else {\n            if (child.path == this.props.history.location.pathname) {\n              this.setSelected(item);\n            }\n          }\n        });\n      } else {\n        if (item.path == this.props.history.location.pathname) {\n          this.setSelected(item);\n        }\n      }\n    });\n  };\n\n  onMainItemMouseLeave = () => {};\n\n  setSelected = selectedItem => {\n    this.setState({ selectedItem });\n    // console.log(selectedItem);\n  };\n\n  removeSelected = () => {\n    this.setState({ selectedItem: null });\n    // console.log('removed');\n  };\n\n  closeSecNav = () => {\n    // console.log(\"closing sec sidenav\");\n    let { setLayoutSettings, settings } = this.props;\n    let other = {};\n\n    if (isMobile()) {\n      other.open = false;\n    }\n\n    setLayoutSettings(\n      merge({}, settings, {\n        layout2Settings: {\n          leftSidebar: {\n            ...other,\n            secondaryNavOpen: false\n          }\n        }\n      })\n    );\n  };\n\n  openSecNav = () => {\n    let { setLayoutSettings, settings } = this.props;\n    setLayoutSettings(\n      merge({}, settings, {\n        layout2Settings: {\n          leftSidebar: {\n            open: true,\n            secondaryNavOpen: true\n          }\n        }\n      })\n    );\n  };\n\n  componentDidMount() {\n    setTimeout(() => {\n      this.findSelecteditem();\n    })\n    if (window)\n      if (window.innerWidth < 1200) {\n        this.closeSecNav();\n      } else {\n        this.openSecNav();\n      }\n\n    this.windowListener = window.addEventListener(\"resize\", () => {\n      if (window.innerWidth < 1200) {\n        this.closeSecNav();\n      } else {\n        this.openSecNav();\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    if (this.windowListener) {\n      window.removeEventListener(\"resize\", this.windowListener);\n    }\n  }\n\n  render() {\n    let { settings } = this.props;\n    let { selectedItem } = this.state;\n\n    return (\n      <div className=\"side-content-wrap\">\n        <Srcollbar\n          className={classList({\n            \"sidebar-left o-hidden rtl-ps-none\": true,\n            open: settings.layout2Settings.leftSidebar.open\n          })}\n        >\n          <ul className=\"navigation-left\">\n            {navigations.map((item, i) => (\n              <li\n                className={classList({\n                  \"nav-item\": true,\n                  active: item.name === selectedItem.name\n                })}\n                onMouseEnter={() => {\n                  this.onMainItemMouseEnter(item);\n                }}\n                onMouseLeave={this.onMainItemMouseLeave}\n                key={i}\n              >\n                {item.path && item.type !== \"extLink\" && (\n                  <NavLink className=\"nav-item-hold\" to={item.path}>\n                    <i className={`nav-icon ${item.icon}`}></i>\n                    <span className=\"nav-text\">{item.name}</span>\n                  </NavLink>\n                )}\n                {item.path && item.type === \"extLink\" && (\n                  <a className=\"nav-item-hold\" href={item.path}>\n                    <i className={`nav-icon ${item.icon}`}></i>\n                    <span className=\"nav-text\">{item.name}</span>\n                  </a>\n                )}\n                {!item.path && (\n                  <div className=\"nav-item-hold\">\n                    <i className={`nav-icon ${item.icon}`}></i>\n                    <span className=\"nav-text\">{item.name}</span>\n                  </div>\n                )}\n                <div className=\"triangle\"></div>\n              </li>\n            ))}\n          </ul>\n        </Srcollbar>\n\n        <Srcollbar\n          className={classList({\n            \"sidebar-left-secondary o-hidden rtl-ps-none\": true,\n            open: settings.layout2Settings.leftSidebar.secondaryNavOpen\n          })}\n        >\n          <i className=\"sidebar-close i-Close\" onClick={this.closeSecNav}></i>\n          <div className=\"logo ml-4 mb-4\">\n            <img src=\"/assets/images/logo-text.png\" alt=\"logo\" />\n          </div>\n          <div className=\"header mb-3 ml-4\">\n            <h5 className=\"font-weight-bold mb-1\">{selectedItem.name}</h5>\n            <p>{selectedItem.description}</p>\n          </div>\n          {selectedItem && selectedItem.sub && (\n            <DropDownMenu\n              menu={selectedItem.sub}\n              closeSecSidenav={this.closeSecNav}\n            ></DropDownMenu>\n          )}\n        </Srcollbar>\n        <div\n          className={classList({\n            \"sidebar-overlay\": true,\n            open: settings.layout2Settings.leftSidebar.secondaryNavOpen\n          })}\n        ></div>\n      </div>\n    );\n  }\n}\n\nLayout2Sidenav.propTypes = {\n  setLayoutSettings: PropTypes.func.isRequired,\n  settings: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  setLayoutSettings: PropTypes.func.isRequired,\n  settings: state.layout.settings\n});\n\nexport default withRouter(\n  connect(mapStateToProps, {\n    setLayoutSettings\n  })(Layout2Sidenav)\n);\n","import React, { Component, Suspense } from \"react\";\nimport { renderRoutes } from \"react-router-config\";\n\nimport Footer from \"../SharedComponents/Footer\";\nimport Layout2Header from \"./Layout2Header\";\nimport Layout2Sidenav from \"./Layout2Sidenav\";\n\nimport { connect } from \"react-redux\";\n\nimport { classList } from \"@utils\";\nimport { merge } from \"lodash\";\nimport { setLayoutSettings } from \"app/redux/actions/LayoutActions\";\nimport GullSearch from \"@gull/components/GullSearch\";\nimport Loading from \"@gull/components/GullLoadable/Loading\";\n\nclass Layout2 extends Component {\n  state = {};\n\n  handleSearchBoxClose = () => {\n    let { setLayoutSettings, settings } = this.props;\n    setLayoutSettings(\n      merge({}, settings, {\n        layout2Settings: {\n          searchBox: {\n            open: false\n          }\n        }\n      })\n    );\n  };\n\n  render() {\n    let { settings, routes } = this.props;\n\n    return (\n      <div>\n        <div\n          className={`${classList({\n            \"app-admin-wrap layout-sidebar-compact clearfix\": true,\n            \"sidenav-open\": settings.layout2Settings.leftSidebar.open\n          })} ${settings.layout2Settings.leftSidebar.theme}`}\n        >\n          <Layout2Sidenav></Layout2Sidenav>\n          {/* sidebar */}\n\n          <div\n            className={classList({\n              \"main-content-wrap d-flex flex-column\": true,\n              \"sidenav-open\": settings.layout2Settings.leftSidebar.open\n            })}\n          >\n            {(settings.layout2Settings.header.show && <Layout2Header></Layout2Header>)}\n            <Suspense fallback={<Loading />}>\n              <div className=\"main-content\">{renderRoutes(routes)}</div>\n            </Suspense>\n            <Footer></Footer>\n          </div>\n        </div>\n        <GullSearch\n          open={settings.layout2Settings.searchBox.open}\n          handleClose={this.handleSearchBoxClose}\n        ></GullSearch>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  settings: state.layout.settings\n});\n\nexport default connect(mapStateToProps, { setLayoutSettings })(Layout2);\n"],"sourceRoot":""}