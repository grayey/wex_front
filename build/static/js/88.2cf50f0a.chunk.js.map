{"version":3,"sources":["app/views/ui-kits/progressbar/AppProgressbar.jsx","../node_modules/react-bootstrap/esm/ElementChildren.js","../node_modules/react-bootstrap/esm/ProgressBar.js"],"names":["AppProgressbar","state","variantList","routeSegments","name","path","className","title","map","value","key","now","label","i","variant","striped","animated","Component","children","func","index","React","Children","child","isValidElement","forEach","getPercentage","min","max","percentage","Math","round","renderProgressBar","_ref","ref","_classNames","srOnly","style","bsPrefix","props","_objectWithoutPropertiesLoose","createElement","_extends","role","classNames","width","ProgressBar","forwardRef","_ref2","isChild","useBootstrapPrefix","wrapperProps","cloneElement","displayName","defaultProps"],"mappings":"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","file":"static/js/88.2cf50f0a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Breadcrumb } from \"@gull\";\nimport SimpleCard from \"@gull/components/cards/SimpleCard\";\nimport { ProgressBar } from \"react-bootstrap\";\n\nclass AppProgressbar extends Component {\n  state = {};\n  variantList = [\"primary\", \"success\", \"info\", \"warning\", \"danger\"];\n\n  render() {\n    return (\n      <div>\n        <Breadcrumb\n          routeSegments={[\n            { name: \"UI Kits\", path: \"/uikits\" },\n            { name: \"Progress Bar\" }\n          ]}\n        ></Breadcrumb>\n\n        <div className=\"row mb-4\">\n          <div className=\"col-md-6 mb-4\">\n            <SimpleCard title=\"Basic Progress Bar\">\n              {[25, 50, 75, 100].map(value => (\n                <ProgressBar\n                  key={value}\n                  now={value}\n                  className=\"mb-3\"\n                ></ProgressBar>\n              ))}\n            </SimpleCard>\n          </div>\n\n          <div className=\"col-md-6\">\n            <SimpleCard title=\"Basic Progress Bar With Label\">\n              {[25, 50, 75, 100].map(value => (\n                <ProgressBar\n                  key={value}\n                  now={value}\n                  label={`${value}%`}\n                  className=\"mb-3\"\n                ></ProgressBar>\n              ))}\n            </SimpleCard>\n          </div>\n        </div>\n\n        <div className=\"row mb-4\">\n          <div className=\"col-md-6 mb-4\">\n            <SimpleCard title=\"Basic Progress Bar With diff. Background\">\n              {[10, 25, 50, 75, 100].map((value, i) => (\n                <ProgressBar\n                  key={value}\n                  now={value}\n                  variant={this.variantList[i]}\n                  className=\"mb-3\"\n                ></ProgressBar>\n              ))}\n            </SimpleCard>\n          </div>\n\n          <div className=\"col-md-6\">\n            <SimpleCard title=\"Labeled Progress Bar With diff. background\">\n              {[10, 25, 50, 75, 100].map((value, i) => (\n                <ProgressBar\n                  key={value}\n                  now={value}\n                  label={`${value}%`}\n                  variant={this.variantList[i]}\n                  className=\"mb-3\"\n                ></ProgressBar>\n              ))}\n            </SimpleCard>\n          </div>\n        </div>\n\n        <div className=\"row mb-4\">\n          <div className=\"col-md-6 mb-4\">\n            <SimpleCard title=\"Progress Bar With Multiple bars\">\n              <ProgressBar className=\"mb-3\">\n                <ProgressBar variant=\"\" now={10} key={1} />\n                <ProgressBar variant=\"success\" now={25} key={2} />\n                <ProgressBar variant=\"info\" now={50} key={3} />\n              </ProgressBar>\n              <ProgressBar className=\"mb-3\">\n                <ProgressBar variant=\"\" now={20} label=\"20%\" key={1} />\n                <ProgressBar variant=\"\" now={35} label=\"35%\" key={2} />\n                <ProgressBar variant=\"danger\" now={40} label=\"40%\" key={3} />\n              </ProgressBar>\n              <ProgressBar className=\"mb-3\">\n                <ProgressBar variant=\"success\" now={15} label=\"15%\" key={1} />\n                <ProgressBar variant=\"info\" now={25} label=\"25%\" key={2} />\n                <ProgressBar variant=\"warning\" now={30} label=\"30%\" key={3} />\n              </ProgressBar>\n              <ProgressBar className=\"mb-3\">\n                <ProgressBar variant=\"warning\" now={20} label=\"20%\" key={1} />\n                <ProgressBar variant=\"\" now={20} label=\"20%\" key={2} />\n                <ProgressBar variant=\"danger\" now={50} label=\"50%\" key={3} />\n              </ProgressBar>\n              <ProgressBar className=\"mb-3\">\n                <ProgressBar\n                  striped\n                  variant=\"success\"\n                  now={15}\n                  label=\"15%\"\n                  key={1}\n                />\n                <ProgressBar\n                  striped\n                  variant=\"info\"\n                  now={25}\n                  label=\"25%\"\n                  key={2}\n                />\n                <ProgressBar\n                  striped\n                  variant=\"warning\"\n                  now={30}\n                  label=\"30%\"\n                  key={3}\n                />\n              </ProgressBar>\n            </SimpleCard>\n          </div>\n\n          <div className=\"col-md-6\">\n            <SimpleCard title=\"Striped Progress Bar\">\n              {[10, 25, 50, 75, 100].map((value, i) => (\n                <ProgressBar\n                  key={value}\n                  now={value}\n                  striped\n                  label={`${value}%`}\n                  variant={this.variantList[i]}\n                  className=\"mb-3\"\n                ></ProgressBar>\n              ))}\n            </SimpleCard>\n          </div>\n        </div>\n\n        <div className=\"row mb-4\">\n          <div className=\"col-md-12 mb-4\">\n            <SimpleCard title=\"Animated stripes Progress Bar\">\n              {[10, 25, 50, 75, 100].map((value, i) => (\n                <ProgressBar\n                  key={value}\n                  now={value}\n                  animated\n                  striped\n                  variant={this.variantList[i]}\n                  className=\"mb-3\"\n                ></ProgressBar>\n              ))}\n            </SimpleCard>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default AppProgressbar;\n","import React from 'react';\n/**\n * Iterates through children that are typically specified as `props.children`,\n * but only maps over children that are \"valid elements\".\n *\n * The mapFunction provided index will be normalised to the components mapped,\n * so an invalid component would not increase the index.\n *\n */\n\nfunction map(children, func) {\n  var index = 0;\n  return React.Children.map(children, function (child) {\n    return React.isValidElement(child) ? func(child, index++) : child;\n  });\n}\n/**\n * Iterates through children that are \"valid elements\".\n *\n * The provided forEachFunc(child, index) will be called for each\n * leaf child with the index reflecting the position relative to \"valid components\".\n */\n\n\nfunction forEach(children, func) {\n  var index = 0;\n  React.Children.forEach(children, function (child) {\n    if (React.isValidElement(child)) func(child, index++);\n  });\n}\n\nexport { map, forEach };","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React, { cloneElement } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { map } from './ElementChildren';\nvar ROUND_PRECISION = 1000;\n/**\n * Validate that children, if any, are instances of `<ProgressBar>`.\n */\n\nfunction onlyProgressBar(props, propName, componentName) {\n  var children = props[propName];\n\n  if (!children) {\n    return null;\n  }\n\n  var error = null;\n  React.Children.forEach(children, function (child) {\n    if (error) {\n      return;\n    }\n    /**\n     * Compare types in a way that works with libraries that patch and proxy\n     * components like react-hot-loader.\n     *\n     * see https://github.com/gaearon/react-hot-loader#checking-element-types\n     */\n\n\n    var element = /*#__PURE__*/React.createElement(ProgressBar, null);\n    if (child.type === element.type) return;\n    var childType = child.type;\n    var childIdentifier = React.isValidElement(child) ? childType.displayName || childType.name || childType : child;\n    error = new Error(\"Children of \" + componentName + \" can contain only ProgressBar \" + (\"components. Found \" + childIdentifier + \".\"));\n  });\n  return error;\n}\n\nvar defaultProps = {\n  min: 0,\n  max: 100,\n  animated: false,\n  isChild: false,\n  srOnly: false,\n  striped: false\n};\n\nfunction getPercentage(now, min, max) {\n  var percentage = (now - min) / (max - min) * 100;\n  return Math.round(percentage * ROUND_PRECISION) / ROUND_PRECISION;\n}\n\nfunction renderProgressBar(_ref, ref) {\n  var _classNames;\n\n  var min = _ref.min,\n      now = _ref.now,\n      max = _ref.max,\n      label = _ref.label,\n      srOnly = _ref.srOnly,\n      striped = _ref.striped,\n      animated = _ref.animated,\n      className = _ref.className,\n      style = _ref.style,\n      variant = _ref.variant,\n      bsPrefix = _ref.bsPrefix,\n      props = _objectWithoutPropertiesLoose(_ref, [\"min\", \"now\", \"max\", \"label\", \"srOnly\", \"striped\", \"animated\", \"className\", \"style\", \"variant\", \"bsPrefix\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    ref: ref\n  }, props, {\n    role: \"progressbar\",\n    className: classNames(className, bsPrefix + \"-bar\", (_classNames = {}, _classNames[\"bg-\" + variant] = variant, _classNames[bsPrefix + \"-bar-animated\"] = animated, _classNames[bsPrefix + \"-bar-striped\"] = animated || striped, _classNames)),\n    style: _extends({\n      width: getPercentage(now, min, max) + \"%\"\n    }, style),\n    \"aria-valuenow\": now,\n    \"aria-valuemin\": min,\n    \"aria-valuemax\": max\n  }), srOnly ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"sr-only\"\n  }, label) : label);\n}\n\nvar ProgressBar = React.forwardRef(function (_ref2, ref) {\n  var isChild = _ref2.isChild,\n      props = _objectWithoutPropertiesLoose(_ref2, [\"isChild\"]);\n\n  props.bsPrefix = useBootstrapPrefix(props.bsPrefix, 'progress');\n\n  if (isChild) {\n    return renderProgressBar(props, ref);\n  }\n\n  var min = props.min,\n      now = props.now,\n      max = props.max,\n      label = props.label,\n      srOnly = props.srOnly,\n      striped = props.striped,\n      animated = props.animated,\n      bsPrefix = props.bsPrefix,\n      variant = props.variant,\n      className = props.className,\n      children = props.children,\n      wrapperProps = _objectWithoutPropertiesLoose(props, [\"min\", \"now\", \"max\", \"label\", \"srOnly\", \"striped\", \"animated\", \"bsPrefix\", \"variant\", \"className\", \"children\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    ref: ref\n  }, wrapperProps, {\n    className: classNames(className, bsPrefix)\n  }), children ? map(children, function (child) {\n    return cloneElement(child, {\n      isChild: true\n    });\n  }) : renderProgressBar({\n    min: min,\n    now: now,\n    max: max,\n    label: label,\n    srOnly: srOnly,\n    striped: striped,\n    animated: animated,\n    bsPrefix: bsPrefix,\n    variant: variant\n  }, ref));\n});\nProgressBar.displayName = 'ProgressBar';\nProgressBar.defaultProps = defaultProps;\nexport default ProgressBar;"],"sourceRoot":""}