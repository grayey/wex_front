{"version":3,"sources":["app/views/app/invoice/InvoiceService.js","app/views/app/invoice/InvoiceViewer.jsx","app/views/app/invoice/InvoiceEditor.jsx","app/views/app/invoice/InvoiceDetails.jsx"],"names":["getAllInvoice","axios","get","getInvoiceById","id","data","deleteInvoice","invoice","post","addInvoice","updateInvoice","InvoiceViewer","state","subTotalCost","this","props","match","params","then","res","setState","orderNo","buyer","seller","item","invoiceItemList","status","vat","date","className","to","Button","variant","onClick","toggleInvoiceEditor","window","print","format","Date","getTime","name","address","scope","map","index","unit","price","key","Component","withRouter","InvoiceEditor","currency","loading","generateRandomId","tempId","Math","random","toString","substr","length","handleSubmit","values","setSubmitting","console","log","isNewInvoice","history","push","calculateSubTotal","reduce","total","initialValues","validationSchema","invoiceSchema","onSubmit","enableReinitialize","errors","touched","handleChange","handleBlur","setFieldValue","isSubmitting","Form","type","disabled","FormGroup","FormLabel","FormControl","placeholder","onChange","onBlur","isInvalid","value","checked","dateFormat","selected","as","arrayHelpers","ind","remove","yup","shape","required","of","min","InvoiceDetails","showInvoiceEditor","Card","elevation"],"mappings":"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","file":"static/js/90.ab473abb.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport const getAllInvoice = () => {\n    return axios.get(\"/api/invoices/all\")\n}\nexport const getInvoiceById = (id) => {\n    return axios.get(\"/api/invoices\", { data: id })\n}\nexport const deleteInvoice = (invoice) => {\n    return axios.post(\"/api/invoices/delete\", invoice)\n}\nexport const addInvoice = (invoice) => {\n    return axios.post(\"/api/invoices/add\", invoice)\n}\nexport const updateInvoice = (invoice) => {\n    return axios.post(\"/api/invoices/update\", invoice)\n}","import React, { Component } from \"react\";\nimport { Button, Table, Card } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport { getInvoiceById } from \"./InvoiceService\";\nimport { format } from \"date-fns\";\nimport { withRouter } from \"react-router-dom\";\n\nclass InvoiceViewer extends Component {\n  state = {};\n  subTotalCost = 0;\n\n  componentDidMount() {\n    getInvoiceById(this.props.match.params.id).then(res => {\n      this.setState({ ...res.data });\n    });\n  }\n\n  render() {\n    this.subTotalCost = 0;\n    let {\n      orderNo,\n      buyer,\n      seller,\n      item: invoiceItemList = [],\n      status,\n      vat,\n      date\n    } = this.state;\n\n    return (\n      <div className=\"invoice-viewer py-16\">\n        <div className=\"viewer_actions px-3 mb-3 d-flex align-items-center justify-content-between\">\n          <Link to=\"/invoice/list\">\n            <i className=\"i-Left1 text-20 font-weight-700\"> </i>\n          </Link>\n          <div>\n            <Button\n              className=\"mr-3 py-2\"\n              variant=\"primary\"\n              onClick={() => this.props.toggleInvoiceEditor()}\n            >\n              Edit Invoice\n            </Button>\n            <Button\n              onClick={() => window.print()}\n              className=\"py-2\"\n              variant=\"warning\"\n            >\n              Print Invoice\n            </Button>\n          </div>\n        </div>\n\n        <div id=\"print-area\" className=\"px-3\">\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <h4 className=\"font-weight-bold\">Order Info</h4>\n              <p>#{orderNo}</p>\n            </div>\n            <div className=\"col-md-6 text-sm-right\">\n              <p className=\"text-capitalize\">\n                <strong>Order status:</strong> {status}\n              </p>\n              <p>\n                <strong>Order date: </strong>\n                <span>\n                  {date\n                    ? format(new Date(date).getTime(), \"MMMM dd, yyyy\")\n                    : \"\"}\n                </span>\n              </p>\n            </div>\n          </div>\n          <div className=\"mt-3 mb-4 border-top\"></div>\n          <div className=\"row mb-5\">\n            <div className=\"col-md-6 mb-3 mb-sm-0\">\n              <h5 className=\"font-weight-bold\">Bill From</h5>\n              <p>{seller ? seller.name : null}</p>\n              <span className=\"white-space-pre-line\">\n                {seller ? seller.address : null}\n              </span>\n            </div>\n            <div className=\"col-md-6 text-sm-right\">\n              <h5 className=\"font-weight-bold\">Bill To</h5>\n              <p>{buyer ? buyer.name : null}</p>\n              <span className=\"white-space-pre-line\">\n                {buyer ? buyer.address : null}\n              </span>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-md-12 table-responsive\">\n              <table className=\"table table-hover mb-4\">\n                <thead className=\"bg-gray-300\">\n                  <tr>\n                    <th scope=\"col\">#</th>\n                    <th scope=\"col\">Item Name</th>\n                    <th scope=\"col\">Unit Price</th>\n                    <th scope=\"col\">Unit</th>\n                    <th scope=\"col\">Cost</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {invoiceItemList.map((item, index) => {\n                    this.subTotalCost += item.unit * item.price;\n                    return (\n                      <tr key={index}>\n                        <td className=\"text-capitalize\">{index + 1}</td>\n                        <td className=\"text-capitalize\">{item.name}</td>\n                        <td className=\"text-capitalize\">{item.price}</td>\n                        <td className=\"text-capitalize\">{item.unit}</td>\n                        <td>{item.unit * item.price}</td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            </div>\n\n            <div className=\"col-md-12\">\n              <div className=\"invoice-summary\">\n                <p>\n                  Sub total: <span>${this.subTotalCost}</span>\n                </p>\n                <p>\n                  Vat(%): <span>{vat}</span>\n                </p>\n                <h5 className=\"font-weight-bold\">\n                  Grand Total:\n                  <span>\n                    ${(this.subTotalCost += (this.subTotalCost * vat) / 100)}\n                  </span>\n                </h5>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(InvoiceViewer);\n","import React, { Component, Fragment } from \"react\";\nimport {\n  Button,\n  Form,\n  FormGroup,\n  FormControl,\n  FormLabel\n} from \"react-bootstrap\";\nimport { Formik, FieldArray } from \"formik\";\nimport DatePicker from \"react-datepicker\";\nimport * as yup from \"yup\";\n\nimport { getInvoiceById, addInvoice, updateInvoice } from \"./InvoiceService\";\nimport { withRouter } from \"react-router-dom\";\n\nclass InvoiceEditor extends Component {\n  state = {\n    id: \"\",\n    orderNo: \"\",\n    buyer: {\n      name: \"\",\n      address: \"\"\n    },\n    seller: {\n      name: \"\",\n      address: \"\"\n    },\n    item: [],\n    status: \"\",\n    vat: \"\",\n    date: new Date(),\n    currency: \"$\",\n    loading: false\n  };\n\n  subTotalCost = 0;\n\n  componentDidMount() {\n    if (!this.props.isNewInvoice)\n      getInvoiceById(this.props.match.params.id).then(res => {\n        this.setState({ ...res.data });\n      });\n    else {\n      this.generateRandomId();\n    }\n  }\n\n  generateRandomId = () => {\n    let tempId = Math.random().toString();\n    let id = tempId.substr(2, tempId.length - 1);\n    this.setState({ id });\n  };\n\n  handleSubmit = (values, { setSubmitting }) => {\n    let { id } = this.state;\n    this.setState({ loading: true });\n    setSubmitting(true);\n\n    console.log(values);\n\n    if (this.props.isNewInvoice)\n      addInvoice({ id, ...values }).then(() => {\n        this.setState({ loading: false });\n        this.props.history.push(`/invoice/${id}`);\n        this.props.toggleInvoiceEditor();\n      });\n    else\n      updateInvoice(values).then(() => {\n        this.setState({ loading: false });\n        this.props.toggleInvoiceEditor();\n      });\n  };\n\n  calculateSubTotal = values => {\n    this.subTotalCost = values.item.reduce(\n      (total, item) => total + item.price * item.unit,\n      0\n    );\n  };\n\n  render() {\n    this.subTotalCost = 0;\n    let { loading } = this.state;\n\n    return (\n      <div className=\"invoice-viewer py-3\">\n        <Formik\n          initialValues={this.state}\n          validationSchema={invoiceSchema}\n          onSubmit={this.handleSubmit}\n          enableReinitialize={true}\n        >\n          {({\n            values,\n            errors,\n            touched,\n            handleChange,\n            handleBlur,\n            handleSubmit,\n            isSubmitting,\n            setSubmitting,\n            setFieldValue\n          }) => {\n            this.calculateSubTotal(values);\n            return (\n              <Fragment>\n                <Form onSubmit={handleSubmit} className=\"px-3\">\n                  <div className=\"viewer_actions d-flex justify-content-end\">\n                    <div className=\"mb-4\">\n                      <Button\n                        type=\"button\"\n                        className=\"mr-3 py-2\"\n                        variant=\"warning\"\n                        onClick={() => this.props.toggleInvoiceEditor()}\n                      >\n                        Cancel\n                      </Button>\n                      <Button\n                        type=\"submit\"\n                        className=\"py-2\"\n                        variant=\"primary\"\n                        disabled={loading}\n                      >\n                        Save\n                      </Button>\n                    </div>\n                  </div>\n\n                  <div className=\"row justify-content-between\">\n                    <div className=\"col-md-6\">\n                      <h4 className=\"font-weight-bold\">Order Info</h4>\n                      <FormGroup className=\"col-sm-4 mb-3 pl-0\">\n                        <FormLabel>Order Number</FormLabel>\n                        <FormControl\n                          type=\"text\"\n                          className=\"form-control\"\n                          name=\"orderNo\"\n                          placeholder=\"Enter order number\"\n                          onChange={handleChange}\n                          onBlur={handleBlur}\n                          isInvalid={errors.orderNo && touched.orderNo}\n                          value={values.orderNo}\n                        />\n                      </FormGroup>\n                    </div>\n                    <div className=\"col-md-3 text-right\">\n                      <label className=\"d-block text-12 text-muted\">\n                        Order Status\n                      </label>\n                      <div className=\"pr-0 mb-4\">\n                        <fieldset className=\"offset-md-6\">\n                          <label className=\"radio radio-danger\">\n                            <input\n                              type=\"radio\"\n                              name=\"status\"\n                              checked={values.status === \"pending\"}\n                              onChange={handleChange}\n                              value=\"pending\"\n                            />\n                            <span>Pending</span>\n                            <span className=\"checkmark\"></span>\n                          </label>\n                          <label className=\"radio check-reverse radio-warning\">\n                            <input\n                              type=\"radio\"\n                              name=\"status\"\n                              checked={values.status === \"processing\"}\n                              onChange={handleChange}\n                              value=\"processing\"\n                            />\n                            <span>Processing</span>\n                            <span className=\"checkmark\"></span>\n                          </label>\n                          <label className=\"radio radio-success\">\n                            <input\n                              type=\"radio\"\n                              name=\"status\"\n                              checked={values.status === \"delivered\"}\n                              onChange={handleChange}\n                              value=\"delivered\"\n                            />\n                            <span>Delivered</span>\n                            <span className=\"checkmark\"></span>\n                          </label>\n                        </fieldset>\n                        {errors.status && touched.status && (\n                          <small className=\"text-danger\">\n                            Minimum 1 item is required\n                          </small>\n                        )}\n                      </div>\n                      <div className=\"form-group mb-3\">\n                        <div className=\"mb-1\">Order Date</div>\n                        <DatePicker\n                          className=\"form-control text-right\"\n                          dateFormat=\"dd/MM/yyyy\"\n                          selected={new Date(values.date)}\n                          onChange={date => {\n                            setFieldValue(\"date\", date);\n                          }}\n                        />\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"mt-3 mb-4 border-top\"></div>\n                  <div className=\"row mb-5\">\n                    <div className=\"col-md-6\">\n                      <h5 className=\"font-weight-bold\">Bill From</h5>\n                      <FormGroup className=\"col-md-10 mb-3 pl-0\">\n                        <FormControl\n                          type=\"text\"\n                          className=\"form-control\"\n                          name=\"seller.name\"\n                          placeholder=\"Bill From\"\n                          value={values.seller.name}\n                          onChange={handleChange}\n                          onBlur={handleBlur}\n                          isInvalid={\n                            errors.seller &&\n                            errors.seller.name &&\n                            touched.seller &&\n                            touched.seller.name\n                          }\n                        />\n                      </FormGroup>\n\n                      <FormGroup className=\"col-md-10 mb-3 pl-0\">\n                        <FormControl\n                          as=\"textarea\"\n                          placeholder=\"Bill From Address\"\n                          name=\"seller.address\"\n                          value={values.seller.address}\n                          onChange={handleChange}\n                          onBlur={handleBlur}\n                          isInvalid={\n                            errors.seller &&\n                            touched.seller &&\n                            errors.seller.address &&\n                            touched.seller.address\n                          }\n                        ></FormControl>\n                      </FormGroup>\n                    </div>\n\n                    <div className=\"col-md-6 text-right\">\n                      <h5 className=\"font-weight-bold\">Bill To</h5>\n                      <FormGroup className=\"col-md-10 offset-md-2 mb-3 pr-0\">\n                        <FormControl\n                          type=\"text\"\n                          className=\"text-right\"\n                          name=\"buyer.name\"\n                          placeholder=\"Bill From\"\n                          value={values.buyer.name}\n                          onChange={handleChange}\n                          onBlur={handleBlur}\n                          isInvalid={\n                            errors.buyer &&\n                            touched.buyer &&\n                            errors.buyer.name &&\n                            touched.buyer.name\n                          }\n                        />\n                      </FormGroup>\n                      <FormGroup className=\"col-md-10 offset-md-2 mb-3 pr-0\">\n                        <FormControl\n                          as=\"textarea\"\n                          className=\"text-right\"\n                          placeholder=\"Bill From Address\"\n                          name=\"buyer.address\"\n                          value={values.buyer.address}\n                          onChange={handleChange}\n                          onBlur={handleBlur}\n                          isInvalid={\n                            errors.buyer &&\n                            touched.buyer &&\n                            errors.buyer.address &&\n                            touched.buyer.address\n                          }\n                        ></FormControl>\n                      </FormGroup>\n                    </div>\n                  </div>\n                  <div className=\"row\">\n                    <FieldArray name=\"item\">\n                      {arrayHelpers => (\n                        <div className=\"col-md-12 table-responsive\">\n                          <table className=\"table table-hover mb-3\">\n                            <thead className=\"bg-gray-300\">\n                              <tr>\n                                <th scope=\"col\">#</th>\n                                <th scope=\"col\">Item Name</th>\n                                <th scope=\"col\">Unit Price</th>\n                                <th scope=\"col\">Unit</th>\n                                <th scope=\"col\">Cost</th>\n                                <th scope=\"col\"></th>\n                              </tr>\n                            </thead>\n                            <tbody>\n                              {values.item.map((item, ind) => (\n                                <tr key={ind}>\n                                  <th className=\"text-middle\" scope=\"row\">\n                                    {ind + 1}\n                                  </th>\n                                  <td>\n                                    <FormControl\n                                      value={values.item[ind].name}\n                                      name={`item[${ind}].name`}\n                                      type=\"text\"\n                                      placeholder=\"Item Name\"\n                                      onChange={handleChange}\n                                      onBlur={handleBlur}\n                                      isInvalid={\n                                        errors.item &&\n                                        touched.item &&\n                                        errors.item[ind] &&\n                                        touched.item[ind] &&\n                                        errors.item[ind].name &&\n                                        touched.item[ind].name\n                                      }\n                                    />\n                                  </td>\n                                  <td>\n                                    <FormControl\n                                      value={values.item[ind].price}\n                                      name={`item[${ind}].price`}\n                                      type=\"number\"\n                                      placeholder=\"Unit Price\"\n                                      onChange={handleChange}\n                                      onBlur={handleBlur}\n                                      isInvalid={\n                                        errors.item &&\n                                        touched.item &&\n                                        errors.item[ind] &&\n                                        touched.item[ind] &&\n                                        errors.item[ind].price &&\n                                        touched.item[ind].price\n                                      }\n                                    />\n                                  </td>\n                                  <td>\n                                    <FormControl\n                                      value={values.item[ind].unit}\n                                      name={`item[${ind}].unit`}\n                                      type=\"number\"\n                                      placeholder=\"Unit\"\n                                      onChange={handleChange}\n                                      onBlur={handleBlur}\n                                      isInvalid={\n                                        errors.item &&\n                                        touched.item &&\n                                        errors.item[ind] &&\n                                        touched.item[ind] &&\n                                        errors.item[ind].unit &&\n                                        touched.item[ind].unit\n                                      }\n                                    />\n                                  </td>\n                                  <td className=\"text-middle\">\n                                    {values.item[ind].price *\n                                      values.item[ind].unit}\n                                  </td>\n                                  <td>\n                                    <button\n                                      type=\"button\"\n                                      onClick={() => arrayHelpers.remove(ind)}\n                                      className=\"btn btn-outline-secondary float-right\"\n                                    >\n                                      Delete\n                                    </button>\n                                  </td>\n                                </tr>\n                              ))}\n                            </tbody>\n                          </table>\n                          {values.item.length === 0 && (\n                            <small className=\"text-danger\">\n                              Minimum 1 item is required\n                            </small>\n                          )}\n                          <button\n                            type=\"button\"\n                            onClick={() =>\n                              arrayHelpers.push({\n                                name: \"\",\n                                price: \"\",\n                                unit: \"\"\n                              })\n                            }\n                            className=\"btn btn-primary float-right mb-4\"\n                          >\n                            Add Item\n                          </button>\n                        </div>\n                      )}\n                    </FieldArray>\n\n                    <div className=\"col-md-12\">\n                      <div className=\"invoice-summary invoice-summary-input float-right\">\n                        <p>\n                          Sub total:\n                          <span>\n                            {values.currency}\n                            {this.subTotalCost}\n                          </span>\n                        </p>\n                        <p className=\"d-flex align-items-center\">\n                          Vat(%):\n                          <span>\n                            <FormControl\n                              type=\"text\"\n                              className=\"small-input\"\n                              name=\"vat\"\n                              value={values.vat}\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                              isInvalid={errors.vat && touched.vat}\n                            />\n                            {values.currency}\n                            {(this.subTotalCost * values.vat) / 100}\n                          </span>\n                        </p>\n                        <h5 className=\"font-weight-bold d-flex align-items-center\">\n                          Grand Total:\n                          <span>\n                            <FormControl\n                              type=\"text\"\n                              className=\"small-input\"\n                              name=\"currency\"\n                              value={values.currency}\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                              isInvalid={errors.currency && touched.currency}\n                            />\n                            {values.currency}\n                            {this.subTotalCost +\n                              (this.subTotalCost * values.vat) / 100}\n                          </span>\n                        </h5>\n                      </div>\n                    </div>\n                  </div>\n                </Form>\n              </Fragment>\n            );\n          }}\n        </Formik>\n      </div>\n    );\n  }\n}\n\nconst invoiceSchema = yup.object().shape({\n  orderNo: yup.string().required(\"orderNo is required\"),\n  status: yup.string().required(\"status is required\"),\n  seller: yup.object().shape({\n    name: yup.string().required(\"name is required\"),\n    address: yup.string().required(\"address is required\")\n  }),\n  buyer: yup.object().shape({\n    name: yup.string().required(\"name is required\"),\n    address: yup.string().required(\"address is required\")\n  }),\n  item: yup\n    .array()\n    .of(\n      yup.object().shape({\n        name: yup.string().required(\"name is required\"),\n        price: yup.number().required(\"price is required\"),\n        unit: yup.number().required(\"unit is required\")\n      })\n    )\n    .min(1, \"Minimum 1 item is required\"),\n  vat: yup.number().required(\"unit is required\"),\n  currency: yup.string().required(\"name is required\")\n});\n\nexport default withRouter(InvoiceEditor);\n","import React, { Component } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport InvoiceViewer from \"./InvoiceViewer\";\nimport InvoiceEditor from \"./InvoiceEditor\";\n\nclass InvoiceDetails extends Component {\n  state = {\n    showInvoiceEditor: false,\n    isNewInvoice: false\n  };\n\n  toggleInvoiceEditor = () => {\n    this.setState({\n      showInvoiceEditor: !this.state.showInvoiceEditor,\n      isNewInvoice: false\n    });\n  };\n\n  componentDidMount() {\n    if (this.props.match.params.id === \"create\")\n      this.setState({ showInvoiceEditor: true, isNewInvoice: true });\n  }\n\n  render() {\n    return (\n      <Card elevation={6} className=\"invoice-details m-sm-30\">\n        {this.state.showInvoiceEditor ? (\n          <InvoiceEditor\n            toggleInvoiceEditor={this.toggleInvoiceEditor}\n            isNewInvoice={this.state.isNewInvoice}\n          />\n        ) : (\n          <InvoiceViewer toggleInvoiceEditor={this.toggleInvoiceEditor} />\n        )}\n      </Card>\n    );\n  }\n}\n\nexport default InvoiceDetails;\n"],"sourceRoot":""}