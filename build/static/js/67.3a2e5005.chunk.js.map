{"version":3,"sources":["app/views/roles/RoleDetailComponent.jsx","app/environment/environment.js","app/services/apiService.js","app/services/appMainService.js","app/appNotifications.jsx","app/appWidgets.jsx"],"names":["RoleDetailComponent","props","state","roleSlug","viewedRole","allChecked","navigate","newRoute","editedIndex","allRoles","allTasks","isSaving","isFetching","updateMsg","roleMembers","name","email","status","photoUrl","customTabHeader","title","icon","className","addPermission","task","tasks","findTask","findIndex","t","_id","splice","push","console","log","length","setState","getAllRoles","a","appMainService","then","rolesResponse","catch","error","errorNotification","type","msg","utils","AppNotification","getRoleBySlug","slug","getAllTasks","round2","tasksResponse","formatTaskName","taskName","replace","split","join","includesTask","filter","checkorUncheckAll","forEach","savePermissions","updateRole","successNotification","toggleRole","role","toggleMsg","gL","swal","fire","text","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","cancelButtonText","result","value","toggleIndex","r","toggledRole","deleteRole","deletedRole","resetForm","createRoleForm","description","getUserStatusClass","AppMainService","params","this","match","to","href","defaultActiveKey","id","eventKey","users","created_at","updated_at","style","map","user","index","key","temp_flash","onClick","event","viewUser","full_name","phone_no","colSpan","loading","progress","data-style","EXPAND_RIGHT","cursor","Check","onChange","checked","label","pill","variant","module_name","Component","env","process","app_mode","trim","BASE_URL","development","base_url","base_url_front","production","get","url","path","axios","response","data","jsonData","message","requestStatus","statusCode","post","errorResponse","put","del","delete","apiService","userData","updateUser","userSlug","roleData","categoryData","category","updateCategory","notificationType","timeOut","NotificationManager","FetchingRecords","emptyMsg"],"mappings":"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","file":"static/js/67.3a2e5005.chunk.js","sourcesContent":["import React, { Component, useState, useEffect } from \"react\"\r\nimport { Dropdown, Row, Col, Badge,Button,Form, ButtonToolbar,Modal, Tab, Tabs, TabContent, Nav } from \"react-bootstrap\";\r\n\r\nimport swal from \"sweetalert2\";\r\nimport AppMainService from \"../../services/appMainService\";\r\nimport * as utils from \"@utils\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport AppNotification from \"../../appNotifications\";\r\nimport {FetchingRecords} from \"../../appWidgets\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\n// import queryString from 'query-string';\r\n\r\n\r\n  \r\nimport LaddaButton, {\r\n    XL,\r\n    EXPAND_LEFT,\r\n    EXPAND_RIGHT,\r\n    EXPAND_UP,\r\n\r\n    CONTRACT,\r\n  } from \"react-ladda\";\r\nimport { toLength } from \"lodash\";\r\n\r\nexport class RoleDetailComponent extends Component{\r\n\r\n    state = {\r\n\r\n        roleSlug:\"\",\r\n        viewedRole:{},\r\n        allChecked:false,\r\n        navigate: false,\r\n        newRoute:\"\",\r\n        editedIndex:0,\r\n        allRoles:[],\r\n        allTasks:[],\r\n        isSaving:false,\r\n        isFetching:true,\r\n        updateMsg:'Save',\r\n        roleMembers: [\r\n            {\r\n              name: \"Smith Doe\",\r\n              email: \"Smith@gmail.com\",\r\n              status: \"active\",\r\n              photoUrl: \"/assets/images/faces/1.jpg\"\r\n            },\r\n            {\r\n              name: \"Jhon Doe\",\r\n              email: \"Jhon@gmail.com\",\r\n              status: \"pending\",\r\n              photoUrl: \"/assets/images/faces/2.jpg\"\r\n            },\r\n            {\r\n              name: \"Alex\",\r\n              email: \"Otttio@gmail.com\",\r\n              status: \"inactive\",\r\n              photoUrl: \"/assets/images/faces/3.jpg\"\r\n            },\r\n            {\r\n              name: \"Mathew Doe\",\r\n              email: \"matheo@gmail.com\",\r\n              status: \"active\",\r\n              photoUrl: \"/assets/images/faces/4.jpg\"\r\n            }\r\n          ]\r\n        \r\n    \r\n\r\n    }\r\n    appMainService;\r\n\r\n    \r\n    \r\n    constructor(props){\r\n        super(props)\r\n        this.appMainService = new AppMainService();\r\n    }\r\n\r\n    componentDidMount(){\r\n        // let params = queryString.parse(this.props.location.search);\r\n        const params = this.props.match.params;\r\n        const roleSlug = params.slug;\r\n        console.log('Params', params)\r\n         this.getRoleBySlug(roleSlug);\r\n         this.getAllTasks();\r\n    }\r\n\r\n customTabHeader = (title, icon) => (\r\n        <div className=\"d-flex align-items-center\">\r\n          <span className=\"mr-2\">\r\n            <i className={icon}></i>\r\n          </span>\r\n          <span>{title}</span>\r\n        </div>\r\n      );\r\n\r\n\r\n    /**\r\n     * \r\n     * @param {*} task \r\n     * This method saves the permissions for a role\r\n     */\r\n    addPermission = (task) =>{\r\n        let {viewedRole,allChecked} = this.state;\r\n        const tasks = viewedRole['tasks'];\r\n        const findTask = tasks.findIndex(t => t._id == task._id);\r\n        if(findTask != -1){\r\n            tasks.splice(findTask, 1) // remove\r\n        }else{\r\n            tasks.push(task) // add\r\n            console.log('Tasks ', tasks)\r\n        }\r\n        allChecked = tasks?.length == this.state.allTasks.length && tasks.length \r\n        viewedRole['tasks'] = tasks;\r\n        this.setState({viewedRole, allChecked})\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * This method lists all roles\r\n     */\r\n     getAllRoles = async ()=>{\r\n         let isFetching = false;\r\n\r\n        this.appMainService.getAllRoles().then(\r\n            (rolesResponse)=>{\r\n                const allRoles = rolesResponse;\r\n                this.setState({ allRoles, isFetching })\r\n                console.log('Roles response', rolesResponse)\r\n            }\r\n        ).catch((error)=>{\r\n            this.setState({isFetching})\r\n            const errorNotification = {\r\n                type:'error',\r\n                msg:utils.processErrors(error)\r\n            }\r\n            new AppNotification(errorNotification)\r\n            console.log('Error', error)\r\n        })\r\n    }\r\n\r\n\r\n    /**\r\n     * This method gets a role by its slug\r\n     */\r\n    getRoleBySlug = async (slug)=>{\r\n        let isFetching = false;\r\n       this.appMainService.getRoleBySlug(slug).then(\r\n           (viewedRole)=>{\r\n               this.setState({ viewedRole, isFetching })\r\n               console.log('Roles viewed', viewedRole)\r\n           }\r\n       ).catch((error)=>{\r\n           this.setState({isFetching})\r\n           const errorNotification = {\r\n               type:'error',\r\n               msg:utils.processErrors(error)\r\n           }\r\n           new AppNotification(errorNotification)\r\n           console.log('Error', error)\r\n       })\r\n   }\r\n\r\n\r\n    /**\r\n     * This method lists all tasks\r\n     */\r\n    getAllTasks = async (round2 = false)=>{\r\n        let isFetching = false;\r\n\r\n       this.appMainService.getAllTasks().then(\r\n           (tasksResponse)=>{\r\n               const allTasks = tasksResponse;\r\n               if(!allTasks.length && !round2){\r\n                  return this.getAllTasks(true);\r\n                   \r\n               }\r\n               const allChecked = this.state?.viewedRole?.tasks?.length == allTasks.length && allTasks.length ;\r\n               \r\n               this.setState({ allTasks, isFetching, allChecked })\r\n               console.log('Tasks response', tasksResponse)\r\n           }\r\n       ).catch((error)=>{\r\n           this.setState({isFetching})\r\n           const errorNotification = {\r\n               type:'error',\r\n               msg:utils.processErrors(error)\r\n           }\r\n           new AppNotification(errorNotification)\r\n           console.log('Error', error)\r\n       })\r\n   }\r\n\r\n   formatTaskName = (taskName)=> {\r\n    taskName = taskName.replace('.', ' | ').split('_').join(' ');\r\n    return utils.toTiltle(taskName);\r\n  }\r\n\r\n  includesTask = (task) =>{\r\n      return this.state?.viewedRole?.tasks?.filter( t=> t._id == task._id ).length > 0\r\n  }\r\n\r\n  checkorUncheckAll = () => {\r\n    let {allTasks, viewedRole, allChecked} = this.state;\r\n    let {tasks} = viewedRole;\r\n\r\n    if(!allChecked){\r\n        allTasks.forEach(t =>{\r\n            if(!this.includesTask(t)){\r\n                tasks.push(t)\r\n            }   \r\n        })\r\n    }else{\r\n        tasks = [];\r\n    }\r\n    allChecked = !allChecked;\r\n    viewedRole['tasks'] = tasks;\r\n    this.setState({viewedRole, allChecked});\r\n\r\n  }\r\n    \r\n\r\n    /**\r\n     * This method updates a new role\r\n     */\r\n    savePermissions = async ()=>{\r\n        let isSaving = true;\r\n        let updateMsg = 'Saving';\r\n        this.setState({isSaving, updateMsg})\r\n        this.appMainService.updateRole(this.state.viewedRole, this.state.viewedRole._id).then(\r\n            (viewedRole)=>{\r\n                isSaving = false;\r\n                updateMsg = 'Save';\r\n                this.setState({ viewedRole, isSaving, updateMsg })\r\n                const successNotification = {\r\n                    type:'success',\r\n                    msg:`Successfully updated ${viewedRole.name} permissions!`\r\n                }\r\n                new AppNotification(successNotification)\r\n               \r\n            }\r\n        ).catch(\r\n            (error)=>{\r\n                isSaving = false;\r\n                updateMsg = 'Save';\r\n                this.setState({ isSaving, updateMsg })\r\n                const errorNotification = {\r\n                    type:'error',\r\n                    msg:utils.processErrors(error)\r\n                }\r\n                new AppNotification(errorNotification)\r\n        })\r\n    }\r\n\r\n\r\n  \r\n\r\n\r\n\r\n    /**\r\n     * \r\n     * @param {*} role\r\n     * This method toggles a role's status \r\n     */\r\n    toggleRole = (role)=>{\r\n        const toggleMsg = role.status? \"Disable\":\"Enable\";\r\n        const gL = role.status? \"lose\":\"gain\"\r\n       \r\n\r\n        swal.fire({\r\n            title: `<small>${toggleMsg}&nbsp;<b>${role.name}</b>?</small>`,\r\n            text: `${role.name} members will ${gL} permissions.`,\r\n            icon: \"warning\",\r\n            type: \"question\",\r\n            showCancelButton: true,\r\n            confirmButtonColor: \"#007BFF\",\r\n            cancelButtonColor: \"#d33\",\r\n            confirmButtonText: \"Yes!\",\r\n            cancelButtonText: \"No\"\r\n          })\r\n          .then(result => {\r\n            if (result.value) {\r\n                let { allRoles } = this.state\r\n                const toggleIndex = allRoles.findIndex(r => r._id == role._id)\r\n                // role.status = !role.status;\r\n\r\n              this.appMainService.toggleRole(role).then(\r\n                (toggledRole)=>{\r\n                    allRoles.splice(toggleIndex, 1, toggledRole)\r\n                    this.setState({ allRoles })\r\n                    const successNotification = {\r\n                        type:'success',\r\n                        msg:`${toggledRole.name} successfully ${toggleMsg}d!`\r\n                    }\r\n                    new AppNotification(successNotification)\r\n                }\r\n            ).catch(\r\n                (error)=>{\r\n                    const errorNotification = {\r\n                        type:'error',\r\n                        msg:utils.processErrors(error)\r\n                    }\r\n                    new AppNotification(errorNotification)\r\n            })}\r\n          \r\n          });\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {*} role \r\n     * This method deletes a role\r\n     * \r\n     */\r\n    deleteRole = (role)=>{\r\n         swal.fire({\r\n                title: `<small>Delete&nbsp;<b>${role.name}</b>?</small>`,\r\n                text: \"You won't be able to revert this!\",\r\n                icon: \"warning\",\r\n                type: \"question\",\r\n                showCancelButton: true,\r\n                confirmButtonColor: \"#007BFF\",\r\n                cancelButtonColor: \"#d33\",\r\n                confirmButtonText: \"Yes!\",\r\n                cancelButtonText: \"No\"\r\n              })\r\n              .then(result => {\r\n                if (result.value) {\r\n                let { allRoles } = this.state\r\n                  this.appMainService.deleteRole(role).then(\r\n                    (deletedRole)=>{\r\n                        allRoles = allRoles.filter(r=> r._id !== role._id)\r\n                        this.setState({ allRoles })\r\n                        const successNotification = {\r\n                            type:'success',\r\n                            msg:`${role.name} successfully deleted!`\r\n                        }\r\n                        new AppNotification(successNotification)\r\n                    }\r\n                ).catch(\r\n                    (error)=>{\r\n                        const errorNotification = {\r\n                            type:'error',\r\n                            msg:utils.processErrors(error)\r\n                        }\r\n                        new AppNotification(errorNotification)\r\n                })}\r\n              \r\n              });\r\n     }\r\n\r\n      /**\r\n     * \r\n     * @param {*} modalName \r\n     */\r\n    resetForm = ()=> {\r\n        const createRoleForm = {\r\n            name: \"\",\r\n            description: \"\",\r\n          }\r\n          this.setState({createRoleForm})\r\n\r\n    }\r\n    getUserStatusClass = status => {\r\n        switch (status) {\r\n          case \"active\":\r\n            return \"badge-success\";\r\n          case \"inactive\":\r\n            return \"badge-warning\";\r\n          case \"pending\":\r\n            return \"badge-primary\";\r\n          default:\r\n            break;\r\n        }\r\n      };\r\n    \r\n\r\n    render(){\r\n\r\n        const { navigate, newRoute } = this.state;\r\n        if (navigate) {\r\n          return <Redirect to={newRoute} />\r\n        }\r\n        \r\n        return (\r\n\r\n            <>\r\n                <div className=\"specific\">\r\n        \r\n               \r\n                <div className='float-right'>\r\n                    {/* <Button  variant=\"secondary_custom\" className=\"ripple m-1 text-capitalize\" onClick={ ()=>{ this.toggleModal('create')} }><i className='i-Add'></i> Create Role</Button> */}\r\n                </div>\r\n        \r\n                <div className=\"breadcrumb\">\r\n                    <h1>{this.state.viewedRole?.name}</h1>\r\n                    <ul>\r\n                        <li><a href=\"#\">Detail</a></li>\r\n                        <li>View</li>\r\n                    </ul>\r\n                </div>\r\n              \r\n                <div className=\"separator-breadcrumb border-top\"></div>\r\n                <div className=\"row mb-4\">\r\n        \r\n                    <div className=\"col-md-12 mb-4\">\r\n                        <div className=\"cardx text-left\">\r\n                            <div className=\"card-bodyx\">\r\n\r\n\r\n                            <Tabs defaultActiveKey=\"role_information\" id=\"uncontrolled-tab-example\">\r\n                                            <Tab\r\n                                                eventKey=\"role_information\"\r\n                                                title={this.customTabHeader(\"Role information\", \"i-Atom\")}\r\n                                            >\r\n                                                                    <div className=\"mt-2\">\r\n\r\n                                                <div className=\"row\">\r\n                                                <div className=\"col-md-4 border-right\">\r\n\r\n                                                    <div className=\"card \">\r\n                                                        <div className=\"card-header\">\r\n                                                                <h4 className=\"card-titlex\">\r\n                                                                <Badge className={`badge-round-${this.state.viewedRole?.status ? 'success':'danger'}  m-1`}>\r\n                                                                        {\r\n                                                                            this.state.viewedRole?.status ? (<span>&#x2713;</span>):  (<span>&#x21;</span>)\r\n                                                                        }\r\n                                                                    </Badge>\r\n                                                                    General\r\n                                                                    </h4>\r\n                                                        </div>  \r\n                                                        \r\n                                                        <div className=\"card-body\">\r\n                                                        <p>\r\n                                                        {this.state.viewedRole?.description}\r\n                                                        </p>\r\n                                                        <ul className=\"list-group list-group-flush\">\r\n                                                        <li className=\"list-group-item\"><b>Name: </b>{this.state.viewedRole?.name}</li>\r\n                                                        <li className=\"list-group-item\"><b>No. of members: </b>{this.state.viewedRole?.users?.length}</li>\r\n                                                        <li className=\"list-group-item\">\r\n                                                            <b>Status: </b>\r\n                                                            <span className={this.state.viewedRole?.status ? 'text-success':'text-danger'}>\r\n                                                            {this.state.viewedRole?.status ? 'Enabled':'Disabled'}\r\n                                                            </span>\r\n                                                        \r\n                                                        </li>\r\n                                                        <li className=\"list-group-item\"><b>Date Created: </b>{utils.formatDate(this.state.viewedRole?.created_at)}</li>\r\n                                                        <li className=\"list-group-item\"><b>Date Updated: </b>{utils.formatDate(this.state.viewedRole?.updated_at)}</li>\r\n                                                        </ul>\r\n                                                        </div>\r\n                                                    \r\n                                                    </div>\r\n\r\n                                                    \r\n                                                    \r\n                                                </div>\r\n\r\n                                                <div className=\"col-md-8\">\r\n                                                <div className=\"card \">\r\n                                                        <div className=\"card-header\">\r\n                                                                <h4 className=\"card-titlex\"><b>{this.state.viewedRole?.name}</b> members</h4>\r\n                                                        </div>  \r\n                                                        \r\n                                                        <div className=\"card-body\">\r\n                                                          \r\n                                                        <div className=\"table-responsive\">\r\n                                                        <div style={{\"maxHeight\":\"270px\", \"overflowY\":\"scroll\"}}>\r\n                                                <table id=\"user_table\" className=\"table  text-center\">\r\n                                                    <thead>\r\n                                                    <tr className=\"ul-widget6__tr--sticky-th\">\r\n                                                    <th>#</th>\r\n                                                    <th>Full Name</th>\r\n                                                    \r\n                                                    <th>Email</th>\r\n                                                    <th>Phone No.</th>\r\n                                                    \r\n                                                    <th>Status</th>\r\n                                                    <th>Date Created</th>\r\n                                                    \r\n                                                \r\n                                                    </tr>\r\n                                                    </thead>\r\n                                                <tbody>\r\n                                                {\r\n                                          this.state?.viewedRole?.users?.length ?  this.state?.viewedRole?.users?.map( (user, index)=>{\r\n                                                return (\r\n                                                    <tr key={user._id} className={user.temp_flash ? 'bg-success text-white':''}>\r\n                                                        <td>\r\n                                                            <b>{index+1}</b>.\r\n                                                        </td>\r\n                                                        <td>\r\n                                                            <Link  key={user._id} to={`/dashboard/users/${user._id}}`} onClick={\r\n                                                                (event)=>{\r\n                                                                    this.viewUser(event, user)\r\n                                                                }\r\n                                                            }>\r\n                                                            {user.full_name}\r\n                                                            </Link>\r\n                                                           \r\n                                                        </td>\r\n                                                      \r\n                                                        <td>\r\n                                                        {user.email}\r\n                                                        </td>\r\n                                                        <td>\r\n                                                        {user.phone_no}\r\n                                                        </td>\r\n                                                       \r\n                                                        <td>\r\n                                                        \r\n                                                        <span className={user.status ? 'text-success' : 'text-danger'}>\r\n                                                            {user.status ? 'Enabled' : 'Disabled'}\r\n                                                            </span>\r\n                                                        </td>\r\n\r\n                                                        <td>\r\n                                                        {utils.formatDate(user.created_at)}\r\n                                                        </td>\r\n                                                      \r\n                                                        \r\n                                                    \r\n                                                    </tr>\r\n                                                ) \r\n                                                \r\n                                              \r\n                                            }) :\r\n                                            (\r\n                                                <tr>\r\n                                                    <td className='text-center' colSpan='11'>\r\n                                                    <FetchingRecords isFetching={this.state.isFetching}/>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            )\r\n                                        }\r\n                                                </tbody>\r\n                                                </table>\r\n                                                </div>\r\n\r\n                                                        </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                                </div>\r\n\r\n\r\n\r\n                                                </div>\r\n\r\n                                            </Tab>\r\n                                            <Tab\r\n                                                eventKey=\"permissions\"\r\n                                                title={this.customTabHeader(\"Configure permissions\", \"i-Gear-2\")}\r\n                                            >\r\n                                                <div className=\"card \">\r\n                                                                            <div className=\"card-header card-title mb-0 d-flex align-items-center justify-content-between border-0\">\r\n                                                    \r\n                                                                                    <h3 className=\"w-50 float-left card-title m-0\"><i className=\"i-Gears\"></i> <b>{this.state.viewedRole?.name}</b> permissions</h3>\r\n\r\n                                                                                    <div className='float-right'>\r\n                                                                                        {/* <Button  variant=\"secondary_custom\" className=\"ripple m-1 text-capitalize\" onClick={ ()=>{ this.toggleModal('create')} }><i className='i-Add'></i> Create Role</Button> */}\r\n                                                                                    \r\n                                                                                        <LaddaButton\r\n                                                                                                className={`btn btn-${true ? 'success':'info_custom'} border-0 mr-2 mb-2 position-relative`}\r\n                                                                                                loading={this.state.isSaving}\r\n                                                                                                progress={0.5}\r\n                                                                                                type='button'\r\n                                                                                                data-style={EXPAND_RIGHT}\r\n                                                                                                onClick = {this.savePermissions}>\r\n                                                                                            {this.state.updateMsg} Permissions\r\n                                                                                        </LaddaButton>\r\n                                                                                    </div>\r\n\r\n\r\n                                                                            </div>  \r\n                                                                            \r\n                                                                            <div className=\"card-body\">\r\n                                                                            <div className=\"table-responsive\">\r\n                                                                            <div> \r\n                                                                            {/*  style={{\"maxHeight\":\"500px\", \"overflowY\":\"scroll\"}} */}\r\n                                                                            \r\n                                                                                     <table className=\"display table table-striped table-hover \" id=\"zero_configuration_table\" style={{\"width\":\"100%\"}}>\r\n                                                                    <thead>\r\n                                                                        <tr className=\"ul-widget6__tr--sticky-th\">\r\n                                                                            <th>#</th>\r\n                                                                            <th>Name</th>\r\n                                                                            <th>Module</th>\r\n                                                                            <th>Date Created</th>\r\n                                                                            <th>Date Updated</th>                                              \r\n                                                                            <th>\r\n                                                                                <div className=\"form-inline\" style={{cursor:\"pointer !important\"}}>\r\n                                                                                Select &nbsp; <b>|</b> &nbsp; <Form.Check\r\n                                                                                                    name=\"check_uncheck\"\r\n                                                                                                    \r\n                                                                                                    onChange={this.checkorUncheckAll}\r\n                                                                                                    value=\"\"\r\n                                                                                                    checked={this.state.allChecked}\r\n                                                                                                    type=\"checkbox\"\r\n                                                                                                    id=\"check_uncheck\"\r\n                                                                                                    className={`text-${this.state.allChecked ? 'danger':'success'}`}\r\n                                                                                                    label={this.state.allChecked ?'uncheck all':'check all'}\r\n                                                                                                    />\r\n                                                                                </div>\r\n                                                                                \r\n                                                                            \r\n                                                                                </th>                                              \r\n                                                                        </tr>\r\n                                                                    </thead>\r\n                                                                    <tbody>\r\n                                                                    {\r\n                                                                    this.state.allTasks.length ?  this.state.allTasks.map( (task, index)=>{\r\n                                                                            return (\r\n                                                                                <tr key={task._id} className={task.temp_flash ? 'bg-success text-white':''}>\r\n                                                                                    <td>\r\n                                                                                        <b>{index+1}</b>.\r\n                                                                                    </td>\r\n                                                                                    <td>\r\n                                                                                        {this.formatTaskName(task?.name)} &nbsp;\r\n\r\n                                                                                        {\r\n                                                                                            this.includesTask(task) ? (\r\n                                                                                                <Badge  pill variant=\"success\" className=\"m-1\">\r\n                                                                                                    assigned\r\n                                                                                                </Badge>\r\n                                                                                            ): null\r\n                                                                                        }\r\n\r\n                                                                                        \r\n                                                                                    </td>\r\n                                                                                    <td>\r\n                                                                                    {utils.toTiltle(task?.module_name)}\r\n                                                                                    </td>\r\n                                                                                    <td>\r\n                                                                                    {utils.formatDate(task.created_at)}\r\n                                                                                    </td>\r\n                                                                                    <td>\r\n                                                                                    {utils.formatDate(task.updated_at)}\r\n                                                                                    </td>\r\n\r\n                                                                                    <td>\r\n                                                                                    <Form.Check\r\n                                                                                                    name=\"checkbox3\"\r\n                                                                                                    key={`check2${task._id}`}\r\n                                                                                                    onChange={()=>{\r\n                                                                                                    this.addPermission(task)\r\n                                                                                                    }}\r\n                                                                                                    value=\"\"\r\n                                                                                                    checked={this.includesTask(task)}\r\n                                                                                                    type=\"checkbox\"\r\n                                                                                                    id={`check2${task._id}`}\r\n                                                                                                    label=\"\"\r\n                                                                                                    />\r\n                                                                                        \r\n                                                                                    </td>\r\n                                                                            \r\n                                                                                </tr>\r\n                                                                            ) \r\n                                                                            \r\n                                                                        \r\n                                                                        }) :\r\n                                                                        (\r\n                                                                            <tr>\r\n                                                                                <td className='text-center' colSpan='6'>\r\n                                                                                <FetchingRecords isFetching={this.state.isFetching}/>\r\n                                                                                </td>\r\n                                                                            </tr>\r\n                                                                        )\r\n                                                                    }\r\n                                                                    \r\n                                                                    </tbody>\r\n                                                                \r\n                                                                    <tfoot>\r\n                                                                        <tr>\r\n                                                                    <td colSpan='7'>\r\n\r\n                                                                    </td>\r\n                                                                        </tr>\r\n                                                                    </tfoot>\r\n                                                                </table>\r\n                                                                                  </div>\r\n                                                                            </div>\r\n                                                                        </div>\r\n                                                                        </div>\r\n\r\n\r\n                                            </Tab>\r\n                                            \r\n                            </Tabs>\r\n\r\n                               \r\n                            </div>\r\n                                \r\n                            </div>\r\n                        </div>\r\n                    {/* </div> */}\r\n                    {/* <!-- end of col--> */}\r\n\r\n\r\n                \r\n                </div>\r\n\r\n                </div>\r\n            \r\n            </>\r\n        )\r\n\r\n\r\n        \r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport default RoleDetailComponent;\r\n\r\n\r\n","const env = process.env.NODE_ENV;\r\nconst app_mode = env ? env.trim() : \"development\";\r\nconsole.log(\"env\", env, process.env)\r\n\r\nconst environment = {\r\n    development: {\r\n        base_url: 'http://localhost:5000/api',\r\n        base_url_front: ''\r\n    },\r\n    production: {\r\n        base_url: 'https://wex-backend.herokuapp.com/api',\r\n        base_url_front: ''\r\n    }\r\n\r\n}\r\n\r\nexport const APP_ENVIRONMENT = environment[app_mode];","import axios from 'axios';\r\nimport { APP_ENVIRONMENT } from '../environment/environment';\r\n\r\nconst BASE_URL = APP_ENVIRONMENT.base_url;\r\n\r\n\r\nexport const get = async (url, id = null) => {\r\n    let path = `${BASE_URL}/${url}`;\r\n    path = (!id) ? path : `${path}/${id}`;\r\n    return await axios.get(path).then(\r\n        (response) => {\r\n            return response.data;\r\n        }\r\n    ).then(\r\n        (jsonData) => {\r\n            return jsonData\r\n        })\r\n        .catch(\r\n            (error) => {\r\n                const errorResponse = {\r\n                    data: error,\r\n                    message: error.message,\r\n                    requestStatus: false,\r\n                    statusCode: error\r\n                }\r\n                throw errorResponse;\r\n            }\r\n        )\r\n\r\n}\r\n\r\n\r\nexport const post = async (url, data) => {\r\n    const path = `${BASE_URL}/${url}`;\r\n    return await axios.post(path, data).then(\r\n        (response) => { return response.data; }).catch((error) => {\r\n            \r\n            const errorResponse= error.response\r\n            console.log(errorResponse)\r\n            throw errorResponse;\r\n        })\r\n}\r\n\r\nexport const put = async (url, data = null) => {\r\n    const path = `${BASE_URL}/${url}`;\r\n    return await axios.put(path, data).then(\r\n        (response) => { return response.data; }).catch((error) => {\r\n            const errorResponse= error.response\r\n            throw errorResponse;\r\n        }\r\n        )\r\n\r\n}\r\n\r\nexport const patch = async (url, data = null) => {\r\n    const path = `${BASE_URL}/${url}`;\r\n    return await axios.patch(path, data).then(\r\n        (response) => { return response.data; }).catch((error) => {\r\n            const errorResponse= error.response\r\n            throw errorResponse;\r\n        }\r\n        )\r\n\r\n}\r\n\r\n\r\nexport const del = async (url) => {\r\n    const path = `${BASE_URL}/${url}`;\r\n    return await axios.delete(path).then(\r\n        (response) => { return response.data; }).catch((error) => {\r\n            const errorResponse= error.response\r\n            throw errorResponse;\r\n        }\r\n        )\r\n\r\n}\r\n\r\n\r\nexport const postFile = async (url, file, data = null) => {\r\n    const path = extractDataAsParam(`${BASE_URL}/${url}`, data);\r\n    return await axios.post(path, file, data).then(\r\n        (response) => { return response.data; }).catch((error) => {\r\n            const errorResponse= error.response\r\n            throw errorResponse;\r\n        }\r\n        )\r\n\r\n}\r\n\r\n\r\n// async function post(url, data) {\r\n//     return fetch(path).then(res => res.json()).catch(error => error.json());\r\n// }\r\n\r\n// async function put(url, data) {\r\n//     return fetch(path).then(res => res.json()).catch(error => error.json());\r\n// }\r\n\r\n// async function del(url) {\r\n//     return fetch(path).then(res => res.json()).catch(error => error.json());\r\n// }\r\n\r\n\r\n\r\nfunction extractDataAsParam(path, data = null) {\r\n    if (data) {\r\n        let dataParams = '?';\r\n        let appendment = '';\r\n        for (let key in data) {\r\n            appendment += `${key}=${data[key]}&`;\r\n        }\r\n        path += `${dataParams}${appendment}`;\r\n    }\r\n    return path;\r\n}","import { Component } from 'react';\r\nimport * as apiService from './apiService';\r\n\r\n\r\nexport default class AppMainService extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n\r\n     /**\r\n     * \r\n     * --- USERS SECTION HERE ----\r\n     * \r\n     */\r\n\r\n\r\n     /**\r\n      * \r\n      * @param {*} user\r\n      * \r\n      * This method logs a user in \r\n      */\r\n     async logUserIn(user){\r\n        return await apiService.post('users/auth/login', user);\r\n     }\r\n\r\n\r\n     /**\r\n      * This method returns a list of all users\r\n      */\r\n     async getAllUsers(){\r\n        const url = 'users';\r\n        return await apiService.get(url);\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * @param {*} userData \r\n     * this method creates a new user\r\n     */\r\n    async createUser(userData){\r\n        const url = 'users/';\r\n        return await apiService.post(url,userData);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {*} user \r\n     * @param {*} id \r\n     * This method updates a user\r\n     */\r\n    async updateUser(user, id){\r\n        const url =`users/${id}/`;\r\n        return await apiService.put(url,user);\r\n\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {*} user\r\n     * This method deletes a user\r\n     */\r\n    async deleteUser(user){\r\n        const url = `users/${user._id}`\r\n        return await apiService.del(url);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {*} user \r\n     * This method toggles a user\r\n     */\r\n    async toggleUser(user){\r\n        user.status = !user.status\r\n      return this.updateUser(user, user._id);\r\n    }\r\n\r\n    /**\r\n      * This method returns a user by its slug\r\n      * \r\n      */\r\n     async getUserBySlug(userSlug){\r\n        const url = `users/${userSlug}`;\r\n        return await apiService.get(url);\r\n    }\r\n\r\n    \r\n\r\n\r\n\r\n    \r\n    /**\r\n     * \r\n     * --- ROLES SECTION HERE ----\r\n     * \r\n     */\r\n\r\n\r\n     /**\r\n      * This method returns a list of all roles\r\n      */\r\n    async getAllRoles(){\r\n        const url = 'roles';\r\n        return await apiService.get(url);\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * @param {*} roleData \r\n     * this method creates a new role\r\n     */\r\n    async createRole(roleData){\r\n        const url = 'roles/';\r\n        return await apiService.post(url,roleData);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {*} role \r\n     * @param {*} id \r\n     * This method updates a role\r\n     */\r\n    async updateRole(role, id){\r\n        const url =`roles/${id}/`;\r\n        return await apiService.put(url,role);\r\n\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {*} role\r\n     * This method deletes a role\r\n     */\r\n    async deleteRole(role){\r\n        const url = `roles/${role._id}`\r\n        return await apiService.del(url);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {*} role \r\n     * This method toggles a role\r\n     */\r\n    async toggleRole(role){\r\n        role.status = !role.status\r\n      return this.updateRole(role, role._id);\r\n    }\r\n\r\n    /**\r\n      * This method returns a role by its slug\r\n      * \r\n      */\r\n     async getRoleBySlug(roleSlug){\r\n        const url = `roles/${roleSlug}`;\r\n        return await apiService.get(url);\r\n    }\r\n\r\n\r\n\r\n\r\n     /**\r\n     * \r\n     * --- CATEGORIES SECTION HERE ----\r\n     * \r\n     */\r\n\r\n\r\n     /**\r\n      * This method returns a list of all categories\r\n      */\r\n     async getAllCategories(){\r\n        const url = 'categories';\r\n        return await apiService.get(url);\r\n    }\r\n\r\n\r\n    \r\n    \r\n\r\n    /**\r\n     * \r\n     * @param {*} categoryData \r\n     * this method creates a new category\r\n     */\r\n    async createCategory(categoryData){\r\n        const url = 'categories/';\r\n        return await apiService.post(url,categoryData);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {*} category \r\n     * @param {*} id \r\n     * This method updates a category\r\n     */\r\n    async updateCategory(category, id){\r\n        const url =`categories/${id}/`;\r\n        return await apiService.put(url,category);\r\n\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {*} category\r\n     * This method deletes a category\r\n     */\r\n    async deleteCategory(category){\r\n        const url = `categories/${category._id}`\r\n        return await apiService.del(url);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {*} category \r\n     * This method toggles a category\r\n     */\r\n    async toggleCategory(category){\r\n        category.status = !category.status\r\n      return this.updateCategory(category, category._id);\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * \r\n     * TASKS SECTION --------\r\n     * \r\n     */\r\n      /**\r\n      * This method returns a list of all categories\r\n      */\r\n     async getAllTasks(){\r\n        const url = 'tasks';\r\n        return await apiService.get(url);\r\n    }\r\n\r\n}","import {\r\n    NotificationManager\r\n  } from \"react-notifications\";\r\n\r\n\r\nexport default class AppNotification {\r\n    constructor(props){\r\n        const notificationType = props.type;\r\n        const timeOut = props.timeOut || 10000;\r\n        const message = props.msg\r\n        const title = notificationType;\r\n          NotificationManager[notificationType](\r\n              message,\r\n              title,\r\n              timeOut\r\n            );\r\n        }\r\n\r\n\r\n        \r\n         \r\n  }\r\n\r\n   \r\n","import React from \"react\";\r\n\r\nexport const FetchingRecords = (props)=>{\r\n\r\n    return props.isFetching ? (\r\n        <>\r\n          <div className=\"loader-bubble loader-bubble-info m-5\"></div>\r\n          <div className=\"loader-bubble loader-bubble-light m-5\"></div>\r\n          <div className=\"loader-bubble loader-bubble-dark m-5\"></div>\r\n        </>\r\n    ): \r\n    (\r\n    <>\r\n        <div>\r\n            {props.emptyMsg || 'No records found' }\r\n        </div>\r\n      </>\r\n    )\r\n     \r\n}"],"sourceRoot":""}